// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package schema

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/raito-io/sdk/types/models"
)

// AccessProvider includes the GraphQL fields of AccessProvider requested by the fragment AccessProvider.
type AccessProvider struct {
	Id                      string                      `json:"id"`
	IsSample                bool                        `json:"isSample"`
	CreatedAt               time.Time                   `json:"createdAt"`
	ModifiedAt              time.Time                   `json:"modifiedAt"`
	Name                    string                      `json:"name"`
	NamingHint              *string                     `json:"namingHint"`
	State                   models.AccessProviderState  `json:"state"`
	Action                  models.AccessProviderAction `json:"action"`
	Type                    *string                     `json:"type"`
	Description             string                      `json:"description"`
	PolicyRule              *string                     `json:"policyRule"`
	Override                bool                        `json:"override"`
	External                bool                        `json:"external"`
	NotInternalizable       bool                        `json:"notInternalizable"`
	WhoLocked               *bool                       `json:"whoLocked"`
	WhoLockedReason         *string                     `json:"whoLockedReason"`
	InheritanceLocked       *bool                       `json:"inheritanceLocked"`
	InheritanceLockedReason *string                     `json:"inheritanceLockedReason"`
	WhatLocked              *bool                       `json:"whatLocked"`
	WhatLockedReason        *string                     `json:"whatLockedReason"`
	NameLocked              *bool                       `json:"nameLocked"`
	NameLockedReason        *string                     `json:"nameLockedReason"`
	DeleteLocked            *bool                       `json:"deleteLocked"`
	DeleteLockedReason      *string                     `json:"deleteLockedReason"`
	Complete                *bool                       `json:"complete"`
	// Fetches the data sources that this AP will get deployed to.
	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

// GetId returns AccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetId() string { return v.Id }

// GetIsSample returns AccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetIsSample() bool { return v.IsSample }

// GetCreatedAt returns AccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns AccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetName returns AccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetName() string { return v.Name }

// GetNamingHint returns AccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNamingHint() *string { return v.NamingHint }

// GetState returns AccessProvider.State, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetState() models.AccessProviderState { return v.State }

// GetAction returns AccessProvider.Action, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetAction() models.AccessProviderAction { return v.Action }

// GetType returns AccessProvider.Type, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetType() *string { return v.Type }

// GetDescription returns AccessProvider.Description, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetDescription() string { return v.Description }

// GetPolicyRule returns AccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetPolicyRule() *string { return v.PolicyRule }

// GetOverride returns AccessProvider.Override, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetOverride() bool { return v.Override }

// GetExternal returns AccessProvider.External, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetExternal() bool { return v.External }

// GetNotInternalizable returns AccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNotInternalizable() bool { return v.NotInternalizable }

// GetWhoLocked returns AccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhoLocked() *bool { return v.WhoLocked }

// GetWhoLockedReason returns AccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhoLockedReason() *string { return v.WhoLockedReason }

// GetInheritanceLocked returns AccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetInheritanceLocked() *bool { return v.InheritanceLocked }

// GetInheritanceLockedReason returns AccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetInheritanceLockedReason() *string { return v.InheritanceLockedReason }

// GetWhatLocked returns AccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhatLocked() *bool { return v.WhatLocked }

// GetWhatLockedReason returns AccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetWhatLockedReason() *string { return v.WhatLockedReason }

// GetNameLocked returns AccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNameLocked() *bool { return v.NameLocked }

// GetNameLockedReason returns AccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetNameLockedReason() *string { return v.NameLockedReason }

// GetDeleteLocked returns AccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetDeleteLocked() *bool { return v.DeleteLocked }

// GetDeleteLockedReason returns AccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetDeleteLockedReason() *string { return v.DeleteLockedReason }

// GetComplete returns AccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetComplete() *bool { return v.Complete }

// GetDataSources returns AccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *AccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource { return v.DataSources }

// AccessProviderDataSourcesDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderDataSourcesDataSource struct {
	DataSource `json:"-"`
}

// GetId returns AccessProviderDataSourcesDataSource.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetId() string { return v.DataSource.Id }

// GetName returns AccessProviderDataSourcesDataSource.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetName() string { return v.DataSource.Name }

// GetType returns AccessProviderDataSourcesDataSource.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns AccessProviderDataSourcesDataSource.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns AccessProviderDataSourcesDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns AccessProviderDataSourcesDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns AccessProviderDataSourcesDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns AccessProviderDataSourcesDataSource.Parent, and is useful for accessing the field via an interface.
func (v *AccessProviderDataSourcesDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *AccessProviderDataSourcesDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderDataSourcesDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderDataSourcesDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderDataSourcesDataSource struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *AccessProviderDataSourcesDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderDataSourcesDataSource) __premarshalJSON() (*__premarshalAccessProviderDataSourcesDataSource, error) {
	var retval __premarshalAccessProviderDataSourcesDataSource

	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

type AccessProviderFilterInput struct {
	Actions               []models.AccessProviderAction `json:"actions"`
	States                []models.AccessProviderState  `json:"states"`
	External              *bool                         `json:"external"`
	Search                *string                       `json:"search"`
	DataSource            *string                       `json:"dataSource"`
	CanEditWho            *bool                         `json:"canEditWho"`
	CanEditInheritance    *bool                         `json:"canEditInheritance"`
	CanEditWhat           *bool                         `json:"canEditWhat"`
	IncludeGlobal         *bool                         `json:"includeGlobal"`
	CanBeLinkedFrom       *string                       `json:"canBeLinkedFrom"`
	CanBeLinkedTo         *string                       `json:"canBeLinkedTo"`
	CanBeLinkedFromAction *models.AccessProviderAction  `json:"canBeLinkedFromAction"`
	CanBeLinkedToAction   *models.AccessProviderAction  `json:"canBeLinkedToAction"`
	Exclude               []string                      `json:"exclude"`
}

// GetActions returns AccessProviderFilterInput.Actions, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetActions() []models.AccessProviderAction { return v.Actions }

// GetStates returns AccessProviderFilterInput.States, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetStates() []models.AccessProviderState { return v.States }

// GetExternal returns AccessProviderFilterInput.External, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetExternal() *bool { return v.External }

// GetSearch returns AccessProviderFilterInput.Search, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetSearch() *string { return v.Search }

// GetDataSource returns AccessProviderFilterInput.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetDataSource() *string { return v.DataSource }

// GetCanEditWho returns AccessProviderFilterInput.CanEditWho, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditWho() *bool { return v.CanEditWho }

// GetCanEditInheritance returns AccessProviderFilterInput.CanEditInheritance, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditInheritance() *bool { return v.CanEditInheritance }

// GetCanEditWhat returns AccessProviderFilterInput.CanEditWhat, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanEditWhat() *bool { return v.CanEditWhat }

// GetIncludeGlobal returns AccessProviderFilterInput.IncludeGlobal, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetIncludeGlobal() *bool { return v.IncludeGlobal }

// GetCanBeLinkedFrom returns AccessProviderFilterInput.CanBeLinkedFrom, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanBeLinkedFrom() *string { return v.CanBeLinkedFrom }

// GetCanBeLinkedTo returns AccessProviderFilterInput.CanBeLinkedTo, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanBeLinkedTo() *string { return v.CanBeLinkedTo }

// GetCanBeLinkedFromAction returns AccessProviderFilterInput.CanBeLinkedFromAction, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanBeLinkedFromAction() *models.AccessProviderAction {
	return v.CanBeLinkedFromAction
}

// GetCanBeLinkedToAction returns AccessProviderFilterInput.CanBeLinkedToAction, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetCanBeLinkedToAction() *models.AccessProviderAction {
	return v.CanBeLinkedToAction
}

// GetExclude returns AccessProviderFilterInput.Exclude, and is useful for accessing the field via an interface.
func (v *AccessProviderFilterInput) GetExclude() []string { return v.Exclude }

type AccessProviderInput struct {
	Name                *string                        `json:"name"`
	NamingHint          *string                        `json:"namingHint"`
	Action              *models.AccessProviderAction   `json:"action"`
	Description         *string                        `json:"description"`
	WhoDefinition       *string                        `json:"whoDefinition"`
	Who                 *WhoInput                      `json:"who"`
	WhoItems            []WhoItemInput                 `json:"whoItems"`
	WhatDefinition      *string                        `json:"whatDefinition"`
	PolicyRule          *string                        `json:"policyRule"`
	FilterCriteria      *DataComparisonExpressionInput `json:"filterCriteria"`
	DataSource          *string                        `json:"dataSource"`
	Type                *string                        `json:"type"`
	What                []WhatInput                    `json:"what"`
	WhatDataObjects     []AccessProviderWhatInputDO    `json:"whatDataObjects"`
	WhatAccessProviders []AccessProviderWhatInputAP    `json:"whatAccessProviders"`
	Override            *bool                          `json:"override"`
	External            *bool                          `json:"external"`
	AutoGrantOnRequest  *bool                          `json:"autoGrantOnRequest"`
	DefaultGrantLength  *int                           `json:"defaultGrantLength"`
	AutoGrantOnAll      *bool                          `json:"autoGrantOnAll"`
}

// GetName returns AccessProviderInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetName() *string { return v.Name }

// GetNamingHint returns AccessProviderInput.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetNamingHint() *string { return v.NamingHint }

// GetAction returns AccessProviderInput.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetAction() *models.AccessProviderAction { return v.Action }

// GetDescription returns AccessProviderInput.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetDescription() *string { return v.Description }

// GetWhoDefinition returns AccessProviderInput.WhoDefinition, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhoDefinition() *string { return v.WhoDefinition }

// GetWho returns AccessProviderInput.Who, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWho() *WhoInput { return v.Who }

// GetWhoItems returns AccessProviderInput.WhoItems, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhoItems() []WhoItemInput { return v.WhoItems }

// GetWhatDefinition returns AccessProviderInput.WhatDefinition, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatDefinition() *string { return v.WhatDefinition }

// GetPolicyRule returns AccessProviderInput.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetPolicyRule() *string { return v.PolicyRule }

// GetFilterCriteria returns AccessProviderInput.FilterCriteria, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetFilterCriteria() *DataComparisonExpressionInput {
	return v.FilterCriteria
}

// GetDataSource returns AccessProviderInput.DataSource, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetDataSource() *string { return v.DataSource }

// GetType returns AccessProviderInput.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetType() *string { return v.Type }

// GetWhat returns AccessProviderInput.What, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhat() []WhatInput { return v.What }

// GetWhatDataObjects returns AccessProviderInput.WhatDataObjects, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatDataObjects() []AccessProviderWhatInputDO {
	return v.WhatDataObjects
}

// GetWhatAccessProviders returns AccessProviderInput.WhatAccessProviders, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetWhatAccessProviders() []AccessProviderWhatInputAP {
	return v.WhatAccessProviders
}

// GetOverride returns AccessProviderInput.Override, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetOverride() *bool { return v.Override }

// GetExternal returns AccessProviderInput.External, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetExternal() *bool { return v.External }

// GetAutoGrantOnRequest returns AccessProviderInput.AutoGrantOnRequest, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetAutoGrantOnRequest() *bool { return v.AutoGrantOnRequest }

// GetDefaultGrantLength returns AccessProviderInput.DefaultGrantLength, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetDefaultGrantLength() *int { return v.DefaultGrantLength }

// GetAutoGrantOnAll returns AccessProviderInput.AutoGrantOnAll, and is useful for accessing the field via an interface.
func (v *AccessProviderInput) GetAutoGrantOnAll() *bool { return v.AutoGrantOnAll }

type AccessProviderOrderByInput struct {
	Name       *Sort `json:"name"`
	CreatedAt  *Sort `json:"createdAt"`
	ModifiedAt *Sort `json:"modifiedAt"`
	Action     *Sort `json:"action"`
	State      *Sort `json:"state"`
	Sync       *Sort `json:"sync"`
}

// GetName returns AccessProviderOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetName() *Sort { return v.Name }

// GetCreatedAt returns AccessProviderOrderByInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetCreatedAt() *Sort { return v.CreatedAt }

// GetModifiedAt returns AccessProviderOrderByInput.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetModifiedAt() *Sort { return v.ModifiedAt }

// GetAction returns AccessProviderOrderByInput.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetAction() *Sort { return v.Action }

// GetState returns AccessProviderOrderByInput.State, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetState() *Sort { return v.State }

// GetSync returns AccessProviderOrderByInput.Sync, and is useful for accessing the field via an interface.
func (v *AccessProviderOrderByInput) GetSync() *Sort { return v.Sync }

// AccessProviderPage includes the GraphQL fields of PagedResult requested by the fragment AccessProviderPage.
type AccessProviderPage struct {
	PageInfo *AccessProviderPagePageInfo   `json:"pageInfo"`
	Edges    []AccessProviderPageEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderPage.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderPage) GetPageInfo() *AccessProviderPagePageInfo { return v.PageInfo }

// GetEdges returns AccessProviderPage.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderPage) GetEdges() []AccessProviderPageEdgesEdge { return v.Edges }

// AccessProviderPageEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderPageEdgesEdge struct {
	Cursor *string                              `json:"cursor"`
	Node   *AccessProviderPageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderPageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderPageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdge) GetNode() *AccessProviderPageEdgesEdgeNodeItem { return v.Node }

func (v *AccessProviderPageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderPageEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderPageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderPageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderPageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPageEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderPageEdgesEdge, error) {
	var retval __premarshalAccessProviderPageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderPageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderPageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderPageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderPageEdgesEdgeNodeAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns AccessProviderPageEdgesEdgeNodeAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns AccessProviderPageEdgesEdgeNodeAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns AccessProviderPageEdgesEdgeNodeAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns AccessProviderPageEdgesEdgeNodeAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns AccessProviderPageEdgesEdgeNodeAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetName() string {
	return v.AccessProvider.Name
}

// GetNamingHint returns AccessProviderPageEdgesEdgeNodeAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns AccessProviderPageEdgesEdgeNodeAccessProvider.State, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns AccessProviderPageEdgesEdgeNodeAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetType returns AccessProviderPageEdgesEdgeNodeAccessProvider.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetType() *string {
	return v.AccessProvider.Type
}

// GetDescription returns AccessProviderPageEdgesEdgeNodeAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns AccessProviderPageEdgesEdgeNodeAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetOverride returns AccessProviderPageEdgesEdgeNodeAccessProvider.Override, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetOverride() bool {
	return v.AccessProvider.Override
}

// GetExternal returns AccessProviderPageEdgesEdgeNodeAccessProvider.External, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetNotInternalizable returns AccessProviderPageEdgesEdgeNodeAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetWhoLocked returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhoLocked() *bool {
	return v.AccessProvider.WhoLocked
}

// GetWhoLockedReason returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhoLockedReason() *string {
	return v.AccessProvider.WhoLockedReason
}

// GetInheritanceLocked returns AccessProviderPageEdgesEdgeNodeAccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetInheritanceLocked() *bool {
	return v.AccessProvider.InheritanceLocked
}

// GetInheritanceLockedReason returns AccessProviderPageEdgesEdgeNodeAccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetInheritanceLockedReason() *string {
	return v.AccessProvider.InheritanceLockedReason
}

// GetWhatLocked returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhatLocked() *bool {
	return v.AccessProvider.WhatLocked
}

// GetWhatLockedReason returns AccessProviderPageEdgesEdgeNodeAccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetWhatLockedReason() *string {
	return v.AccessProvider.WhatLockedReason
}

// GetNameLocked returns AccessProviderPageEdgesEdgeNodeAccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNameLocked() *bool {
	return v.AccessProvider.NameLocked
}

// GetNameLockedReason returns AccessProviderPageEdgesEdgeNodeAccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetNameLockedReason() *string {
	return v.AccessProvider.NameLockedReason
}

// GetDeleteLocked returns AccessProviderPageEdgesEdgeNodeAccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetDeleteLocked() *bool {
	return v.AccessProvider.DeleteLocked
}

// GetDeleteLockedReason returns AccessProviderPageEdgesEdgeNodeAccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetDeleteLockedReason() *string {
	return v.AccessProvider.DeleteLockedReason
}

// GetComplete returns AccessProviderPageEdgesEdgeNodeAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetDataSources returns AccessProviderPageEdgesEdgeNodeAccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource {
	return v.AccessProvider.DataSources
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPageEdgesEdgeNodeAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPageEdgesEdgeNodeAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderPageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Type *string `json:"type"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	Override bool `json:"override"`

	External bool `json:"external"`

	NotInternalizable bool `json:"notInternalizable"`

	WhoLocked *bool `json:"whoLocked"`

	WhoLockedReason *string `json:"whoLockedReason"`

	InheritanceLocked *bool `json:"inheritanceLocked"`

	InheritanceLockedReason *string `json:"inheritanceLockedReason"`

	WhatLocked *bool `json:"whatLocked"`

	WhatLockedReason *string `json:"whatLockedReason"`

	NameLocked *bool `json:"nameLocked"`

	NameLockedReason *string `json:"nameLockedReason"`

	DeleteLocked *bool `json:"deleteLocked"`

	DeleteLockedReason *string `json:"deleteLockedReason"`

	Complete *bool `json:"complete"`

	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) __premarshalJSON() (*__premarshalAccessProviderPageEdgesEdgeNodeAccessProvider, error) {
	var retval __premarshalAccessProviderPageEdgesEdgeNodeAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Type = v.AccessProvider.Type
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.Override = v.AccessProvider.Override
	retval.External = v.AccessProvider.External
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.WhoLocked = v.AccessProvider.WhoLocked
	retval.WhoLockedReason = v.AccessProvider.WhoLockedReason
	retval.InheritanceLocked = v.AccessProvider.InheritanceLocked
	retval.InheritanceLockedReason = v.AccessProvider.InheritanceLockedReason
	retval.WhatLocked = v.AccessProvider.WhatLocked
	retval.WhatLockedReason = v.AccessProvider.WhatLockedReason
	retval.NameLocked = v.AccessProvider.NameLocked
	retval.NameLockedReason = v.AccessProvider.NameLockedReason
	retval.DeleteLocked = v.AccessProvider.DeleteLocked
	retval.DeleteLockedReason = v.AccessProvider.DeleteLockedReason
	retval.Complete = v.AccessProvider.Complete
	retval.DataSources = v.AccessProvider.DataSources
	return &retval, nil
}

// AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderPageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderPageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderPageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderPageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderPageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderPageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderPageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderPageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderPageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderPageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderPageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderPageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderPageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderPageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderPageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type AccessProviderPageEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeInsightsResult) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderPageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderPageEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderPageEdgesEdgeNodeAccessProvider
// AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderPageEdgesEdgeNodeAccessProviderMatch
// AccessProviderPageEdgesEdgeNodeAccessRequest
// AccessProviderPageEdgesEdgeNodeAccessRequestNotification
// AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderPageEdgesEdgeNodeAccessWhatItem
// AccessProviderPageEdgesEdgeNodeAccessWhoItem
// AccessProviderPageEdgesEdgeNodeAccount
// AccessProviderPageEdgesEdgeNodeAuditDiffLog
// AccessProviderPageEdgesEdgeNodeComment
// AccessProviderPageEdgesEdgeNodeDataAccessReturnItem
// AccessProviderPageEdgesEdgeNodeDataObject
// AccessProviderPageEdgesEdgeNodeDataObjectType
// AccessProviderPageEdgesEdgeNodeDataSource
// AccessProviderPageEdgesEdgeNodeDataUsage
// AccessProviderPageEdgesEdgeNodeDatasourceNotification
// AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderPageEdgesEdgeNodeGroup
// AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderPageEdgesEdgeNodeIdentityStore
// AccessProviderPageEdgesEdgeNodeInsightsResult
// AccessProviderPageEdgesEdgeNodeIssue
// AccessProviderPageEdgesEdgeNodeJob
// AccessProviderPageEdgesEdgeNodeJobLogMsg
// AccessProviderPageEdgesEdgeNodePromiseDetails
// AccessProviderPageEdgesEdgeNodeRole
// AccessProviderPageEdgesEdgeNodeRoleAssignment
// AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderPageEdgesEdgeNodeSearchResultItem
// AccessProviderPageEdgesEdgeNodeTag
// AccessProviderPageEdgesEdgeNodeTask
// AccessProviderPageEdgesEdgeNodeTaskNotification
// AccessProviderPageEdgesEdgeNodeUser
// AccessProviderPageEdgesEdgeNodeUserAccessReturnItem
// AccessProviderPageEdgesEdgeNodeUserSubtask
// AccessProviderPageEdgesEdgeNodeUserTask
type AccessProviderPageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderPageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}
func (v *AccessProviderPageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderPageEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderPageEdgesEdgeNodeItem(b []byte, v *AccessProviderPageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderPageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderPageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderPageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderPageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderPageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderPageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderPageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderPageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderPageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(AccessProviderPageEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderPageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderPageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderPageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderPageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderPageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderPageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderPageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderPageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderPageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderPageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderPageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderPageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderPageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderPageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderPageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderPageEdgesEdgeNodeItem(v *AccessProviderPageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderPageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderPageEdgesEdgeNodeAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderPageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderPageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderPageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderPageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderPageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderPageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderPageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderPageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderPageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderPageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderPageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderPageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderPageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderPageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderPageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderPageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderPageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderPageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderPageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderPageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderPageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderPagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderPagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderPagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderPagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderPagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderPagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderPagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderPagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderPagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderPagePageInfo) __premarshalJSON() (*__premarshalAccessProviderPagePageInfo, error) {
	var retval __premarshalAccessProviderPagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

type AccessProviderWhatInputAP struct {
	AccessProvider string     `json:"accessProvider"`
	ExpiresAt      *time.Time `json:"expiresAt"`
}

// GetAccessProvider returns AccessProviderWhatInputAP.AccessProvider, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputAP) GetAccessProvider() string { return v.AccessProvider }

// GetExpiresAt returns AccessProviderWhatInputAP.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputAP) GetExpiresAt() *time.Time { return v.ExpiresAt }

type AccessProviderWhatInputDO struct {
	Permissions       []*string `json:"permissions"`
	GlobalPermissions []*string `json:"globalPermissions"`
	DataObjects       []*string `json:"dataObjects"`
}

// GetPermissions returns AccessProviderWhatInputDO.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetPermissions() []*string { return v.Permissions }

// GetGlobalPermissions returns AccessProviderWhatInputDO.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetGlobalPermissions() []*string { return v.GlobalPermissions }

// GetDataObjects returns AccessProviderWhatInputDO.DataObjects, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatInputDO) GetDataObjects() []*string { return v.DataObjects }

// AccessProviderWhatList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhatList.
type AccessProviderWhatList struct {
	PageInfo *AccessProviderWhatListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhatListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhatList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatList) GetPageInfo() *AccessProviderWhatListPageInfo { return v.PageInfo }

// GetEdges returns AccessProviderWhatList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatList) GetEdges() []AccessProviderWhatListEdgesEdge { return v.Edges }

// AccessProviderWhatListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhatListEdgesEdge struct {
	Cursor *string                                  `json:"cursor"`
	Node   *AccessProviderWhatListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhatListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhatListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdge) GetNode() *AccessProviderWhatListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhatListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhatListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhatListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhatListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhatListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhatListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhatListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhatListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhatListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhatListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhatListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhatListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhatListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhatItem struct {
	Typename                   *string `json:"__typename"`
	AccessProviderWhatListItem `json:"-"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// GetDataObject returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.DataObject, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetDataObject() *AccessProviderWhatListItemDataObject {
	return v.AccessProviderWhatListItem.DataObject
}

// GetGlobalPermissions returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetGlobalPermissions() []*string {
	return v.AccessProviderWhatListItem.GlobalPermissions
}

// GetPermissions returns AccessProviderWhatListEdgesEdgeNodeAccessWhatItem.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) GetPermissions() []*string {
	return v.AccessProviderWhatListItem.Permissions
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListEdgesEdgeNodeAccessWhatItem
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListEdgesEdgeNodeAccessWhatItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`

	DataObject *AccessProviderWhatListItemDataObject `json:"dataObject"`

	GlobalPermissions []*string `json:"globalPermissions"`

	Permissions []*string `json:"permissions"`
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) __premarshalJSON() (*__premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem, error) {
	var retval __premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem

	retval.Typename = v.Typename
	retval.DataObject = v.AccessProviderWhatListItem.DataObject
	retval.GlobalPermissions = v.AccessProviderWhatListItem.GlobalPermissions
	retval.Permissions = v.AccessProviderWhatListItem.Permissions
	return &retval, nil
}

// AccessProviderWhatListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhatListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhatListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhatListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhatListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhatListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhatListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhatListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhatListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhatListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhatListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type AccessProviderWhatListEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeInsightsResult) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhatListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhatListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhatListEdgesEdgeNodeAccessProvider
// AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhatListEdgesEdgeNodeAccessRequest
// AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhatListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhatListEdgesEdgeNodeAccount
// AccessProviderWhatListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhatListEdgesEdgeNodeComment
// AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeDataObject
// AccessProviderWhatListEdgesEdgeNodeDataObjectType
// AccessProviderWhatListEdgesEdgeNodeDataSource
// AccessProviderWhatListEdgesEdgeNodeDataUsage
// AccessProviderWhatListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhatListEdgesEdgeNodeGroup
// AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeIdentityStore
// AccessProviderWhatListEdgesEdgeNodeInsightsResult
// AccessProviderWhatListEdgesEdgeNodeIssue
// AccessProviderWhatListEdgesEdgeNodeJob
// AccessProviderWhatListEdgesEdgeNodeJobLogMsg
// AccessProviderWhatListEdgesEdgeNodePromiseDetails
// AccessProviderWhatListEdgesEdgeNodeRole
// AccessProviderWhatListEdgesEdgeNodeRoleAssignment
// AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhatListEdgesEdgeNodeSearchResultItem
// AccessProviderWhatListEdgesEdgeNodeTag
// AccessProviderWhatListEdgesEdgeNodeTask
// AccessProviderWhatListEdgesEdgeNodeTaskNotification
// AccessProviderWhatListEdgesEdgeNodeUser
// AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhatListEdgesEdgeNodeUserSubtask
// AccessProviderWhatListEdgesEdgeNodeUserTask
type AccessProviderWhatListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhatListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhatListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhatListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhatListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhatListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhatListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhatListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhatListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(AccessProviderWhatListEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhatListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhatListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhatListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhatListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhatListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhatListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhatListEdgesEdgeNodeItem(v *AccessProviderWhatListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhatListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhatListEdgesEdgeNodeAccessWhatItem
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhatListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhatListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhatListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhatListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhatListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhatListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhatListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhatListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhatListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhatListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhatListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhatListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhatListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhatListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhatListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhatListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhatListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhatListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderWhatListItem includes the GraphQL fields of AccessWhatItem requested by the fragment AccessProviderWhatListItem.
type AccessProviderWhatListItem struct {
	DataObject        *AccessProviderWhatListItemDataObject `json:"dataObject"`
	GlobalPermissions []*string                             `json:"globalPermissions"`
	Permissions       []*string                             `json:"permissions"`
}

// GetDataObject returns AccessProviderWhatListItem.DataObject, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetDataObject() *AccessProviderWhatListItemDataObject {
	return v.DataObject
}

// GetGlobalPermissions returns AccessProviderWhatListItem.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetGlobalPermissions() []*string { return v.GlobalPermissions }

// GetPermissions returns AccessProviderWhatListItem.Permissions, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItem) GetPermissions() []*string { return v.Permissions }

// AccessProviderWhatListItemDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhatListItemDataObject struct {
	DataObject `json:"-"`
}

// GetId returns AccessProviderWhatListItemDataObject.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetId() string { return v.DataObject.Id }

// GetName returns AccessProviderWhatListItemDataObject.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetName() string { return v.DataObject.Name }

// GetFullName returns AccessProviderWhatListItemDataObject.FullName, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetFullName() string { return v.DataObject.FullName }

// GetType returns AccessProviderWhatListItemDataObject.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetType() string { return v.DataObject.Type }

// GetDataType returns AccessProviderWhatListItemDataObject.DataType, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDataType() *string { return v.DataObject.DataType }

// GetDeleted returns AccessProviderWhatListItemDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListItemDataObject) GetDeleted() bool { return v.DataObject.Deleted }

func (v *AccessProviderWhatListItemDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListItemDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListItemDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListItemDataObject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`
}

func (v *AccessProviderWhatListItemDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListItemDataObject) __premarshalJSON() (*__premarshalAccessProviderWhatListItemDataObject, error) {
	var retval __premarshalAccessProviderWhatListItemDataObject

	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	return &retval, nil
}

// AccessProviderWhatListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhatListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhatListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListPageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderWhatListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhatListPageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderWhatListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhatListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhatListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhatListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhatListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhatListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhatListPageInfo, error) {
	var retval __premarshalAccessProviderWhatListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// AccessProviderWhoList includes the GraphQL fields of PagedResult requested by the fragment AccessProviderWhoList.
type AccessProviderWhoList struct {
	PageInfo *AccessProviderWhoListPageInfo   `json:"pageInfo"`
	Edges    []AccessProviderWhoListEdgesEdge `json:"edges"`
}

// GetPageInfo returns AccessProviderWhoList.PageInfo, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoList) GetPageInfo() *AccessProviderWhoListPageInfo { return v.PageInfo }

// GetEdges returns AccessProviderWhoList.Edges, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoList) GetEdges() []AccessProviderWhoListEdgesEdge { return v.Edges }

// AccessProviderWhoListEdgesEdge includes the requested fields of the GraphQL type Edge.
type AccessProviderWhoListEdgesEdge struct {
	Cursor *string                                 `json:"cursor"`
	Node   *AccessProviderWhoListEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns AccessProviderWhoListEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns AccessProviderWhoListEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdge) GetNode() *AccessProviderWhoListEdgesEdgeNodeItem {
	return v.Node
}

func (v *AccessProviderWhoListEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(AccessProviderWhoListEdgesEdgeNodeItem)
			err = __unmarshalAccessProviderWhoListEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhoListEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhoListEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *AccessProviderWhoListEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListEdgesEdge) __premarshalJSON() (*__premarshalAccessProviderWhoListEdgesEdge, error) {
	var retval __premarshalAccessProviderWhoListEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalAccessProviderWhoListEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccessProviderWhoListEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccessProviderWhoListEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhoListEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type AccessProviderWhoListEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type AccessProviderWhoListEdgesEdgeNodeAccessWhoItem struct {
	Typename                  *string `json:"__typename"`
	AccessProviderWhoListItem `json:"-"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// GetExpiresAfter returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetExpiresAfter() *time.Duration {
	return v.AccessProviderWhoListItem.ExpiresAfter
}

// GetExpiresAt returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetExpiresAt() *time.Time {
	return v.AccessProviderWhoListItem.ExpiresAt
}

// GetPromiseDuration returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.PromiseDuration, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetPromiseDuration() *time.Duration {
	return v.AccessProviderWhoListItem.PromiseDuration
}

// GetType returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetType() AccessWhoItemType {
	return v.AccessProviderWhoListItem.Type
}

// GetItem returns AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.Item, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) GetItem() AccessProviderWhoListItemItemAccessWhoItemItem {
	return v.AccessProviderWhoListItem.Item
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListEdgesEdgeNodeAccessWhoItem
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListEdgesEdgeNodeAccessWhoItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhoListItem)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`

	ExpiresAfter *time.Duration `json:"expiresAfter"`

	ExpiresAt *time.Time `json:"expiresAt"`

	PromiseDuration *time.Duration `json:"promiseDuration"`

	Type AccessWhoItemType `json:"type"`

	Item json.RawMessage `json:"item"`
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) __premarshalJSON() (*__premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem, error) {
	var retval __premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem

	retval.Typename = v.Typename
	retval.ExpiresAfter = v.AccessProviderWhoListItem.ExpiresAfter
	retval.ExpiresAt = v.AccessProviderWhoListItem.ExpiresAt
	retval.PromiseDuration = v.AccessProviderWhoListItem.PromiseDuration
	retval.Type = v.AccessProviderWhoListItem.Type
	{

		dst := &retval.Item
		src := v.AccessProviderWhoListItem.Item
		var err error
		*dst, err = __marshalAccessProviderWhoListItemItemAccessWhoItemItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccessProviderWhoListEdgesEdgeNodeAccessWhoItem.AccessProviderWhoListItem.Item: %w", err)
		}
	}
	return &retval, nil
}

// AccessProviderWhoListEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AccessProviderWhoListEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type AccessProviderWhoListEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type AccessProviderWhoListEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type AccessProviderWhoListEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type AccessProviderWhoListEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type AccessProviderWhoListEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type AccessProviderWhoListEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type AccessProviderWhoListEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhoListEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhoListEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type AccessProviderWhoListEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeInsightsResult) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type AccessProviderWhoListEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// AccessProviderWhoListEdgesEdgeNodeItem is implemented by the following types:
// AccessProviderWhoListEdgesEdgeNodeAccessProvider
// AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail
// AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch
// AccessProviderWhoListEdgesEdgeNodeAccessRequest
// AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification
// AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhatItem
// AccessProviderWhoListEdgesEdgeNodeAccessWhoItem
// AccessProviderWhoListEdgesEdgeNodeAccount
// AccessProviderWhoListEdgesEdgeNodeAuditDiffLog
// AccessProviderWhoListEdgesEdgeNodeComment
// AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeDataObject
// AccessProviderWhoListEdgesEdgeNodeDataObjectType
// AccessProviderWhoListEdgesEdgeNodeDataSource
// AccessProviderWhoListEdgesEdgeNodeDataUsage
// AccessProviderWhoListEdgesEdgeNodeDatasourceNotification
// AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification
// AccessProviderWhoListEdgesEdgeNodeGroup
// AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeIdentityStore
// AccessProviderWhoListEdgesEdgeNodeInsightsResult
// AccessProviderWhoListEdgesEdgeNodeIssue
// AccessProviderWhoListEdgesEdgeNodeJob
// AccessProviderWhoListEdgesEdgeNodeJobLogMsg
// AccessProviderWhoListEdgesEdgeNodePromiseDetails
// AccessProviderWhoListEdgesEdgeNodeRole
// AccessProviderWhoListEdgesEdgeNodeRoleAssignment
// AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification
// AccessProviderWhoListEdgesEdgeNodeSearchResultItem
// AccessProviderWhoListEdgesEdgeNodeTag
// AccessProviderWhoListEdgesEdgeNodeTask
// AccessProviderWhoListEdgesEdgeNodeTaskNotification
// AccessProviderWhoListEdgesEdgeNodeUser
// AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem
// AccessProviderWhoListEdgesEdgeNodeUserSubtask
// AccessProviderWhoListEdgesEdgeNodeUserTask
type AccessProviderWhoListEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhoListEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAccount) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeComment) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObject) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataSource) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroup) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeIssue) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeJob) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRole) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTag) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUser) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}
func (v *AccessProviderWhoListEdgesEdgeNodeUserTask) implementsGraphQLInterfaceAccessProviderWhoListEdgesEdgeNodeItem() {
}

func __unmarshalAccessProviderWhoListEdgesEdgeNodeItem(b []byte, v *AccessProviderWhoListEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(AccessProviderWhoListEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(AccessProviderWhoListEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(AccessProviderWhoListEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(AccessProviderWhoListEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(AccessProviderWhoListEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(AccessProviderWhoListEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(AccessProviderWhoListEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(AccessProviderWhoListEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(AccessProviderWhoListEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(AccessProviderWhoListEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhoListEdgesEdgeNodeItem(v *AccessProviderWhoListEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhoListEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAccessProviderWhoListEdgesEdgeNodeAccessWhoItem
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListEdgesEdgeNodeItem: "%T"`, v)
	}
}

// AccessProviderWhoListEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type AccessProviderWhoListEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type AccessProviderWhoListEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type AccessProviderWhoListEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type AccessProviderWhoListEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type AccessProviderWhoListEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type AccessProviderWhoListEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type AccessProviderWhoListEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type AccessProviderWhoListEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type AccessProviderWhoListEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type AccessProviderWhoListEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// AccessProviderWhoListEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type AccessProviderWhoListEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type AccessProviderWhoListEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItem includes the GraphQL fields of AccessWhoItem requested by the fragment AccessProviderWhoListItem.
type AccessProviderWhoListItem struct {
	ExpiresAfter    *time.Duration                                 `json:"expiresAfter"`
	ExpiresAt       *time.Time                                     `json:"expiresAt"`
	PromiseDuration *time.Duration                                 `json:"promiseDuration"`
	Type            AccessWhoItemType                              `json:"type"`
	Item            AccessProviderWhoListItemItemAccessWhoItemItem `json:"-"`
}

// GetExpiresAfter returns AccessProviderWhoListItem.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetExpiresAfter() *time.Duration { return v.ExpiresAfter }

// GetExpiresAt returns AccessProviderWhoListItem.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetPromiseDuration returns AccessProviderWhoListItem.PromiseDuration, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetPromiseDuration() *time.Duration { return v.PromiseDuration }

// GetType returns AccessProviderWhoListItem.Type, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetType() AccessWhoItemType { return v.Type }

// GetItem returns AccessProviderWhoListItem.Item, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItem) GetItem() AccessProviderWhoListItemItemAccessWhoItemItem {
	return v.Item
}

func (v *AccessProviderWhoListItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListItem
		Item json.RawMessage `json:"item"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Item
		src := firstPass.Item
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAccessProviderWhoListItemItemAccessWhoItemItem(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccessProviderWhoListItem.Item: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccessProviderWhoListItem struct {
	ExpiresAfter *time.Duration `json:"expiresAfter"`

	ExpiresAt *time.Time `json:"expiresAt"`

	PromiseDuration *time.Duration `json:"promiseDuration"`

	Type AccessWhoItemType `json:"type"`

	Item json.RawMessage `json:"item"`
}

func (v *AccessProviderWhoListItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListItem) __premarshalJSON() (*__premarshalAccessProviderWhoListItem, error) {
	var retval __premarshalAccessProviderWhoListItem

	retval.ExpiresAfter = v.ExpiresAfter
	retval.ExpiresAt = v.ExpiresAt
	retval.PromiseDuration = v.PromiseDuration
	retval.Type = v.Type
	{

		dst := &retval.Item
		src := v.Item
		var err error
		*dst, err = __marshalAccessProviderWhoListItemItemAccessWhoItemItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccessProviderWhoListItem.Item: %w", err)
		}
	}
	return &retval, nil
}

// AccessProviderWhoListItemItemAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type AccessProviderWhoListItemItemAccessProvider struct {
	Typename *string `json:"__typename"`
	Id       string  `json:"id"`
	Name     string  `json:"name"`
}

// GetTypename returns AccessProviderWhoListItemItemAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns AccessProviderWhoListItemItemAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetId() string { return v.Id }

// GetName returns AccessProviderWhoListItemItemAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemAccessProvider) GetName() string { return v.Name }

// AccessProviderWhoListItemItemAccessWhoItemItem includes the requested fields of the GraphQL interface AccessWhoItemItem.
//
// AccessProviderWhoListItemItemAccessWhoItemItem is implemented by the following types:
// AccessProviderWhoListItemItemAccessProvider
// AccessProviderWhoListItemItemGroup
// AccessProviderWhoListItemItemNotFoundError
// AccessProviderWhoListItemItemUser
type AccessProviderWhoListItemItemAccessWhoItemItem interface {
	implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AccessProviderWhoListItemItemAccessProvider) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemGroup) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemNotFoundError) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}
func (v *AccessProviderWhoListItemItemUser) implementsGraphQLInterfaceAccessProviderWhoListItemItemAccessWhoItemItem() {
}

func __unmarshalAccessProviderWhoListItemItemAccessWhoItemItem(b []byte, v *AccessProviderWhoListItemItemAccessWhoItemItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(AccessProviderWhoListItemItemAccessProvider)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(AccessProviderWhoListItemItemGroup)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AccessProviderWhoListItemItemNotFoundError)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(AccessProviderWhoListItemItemUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessWhoItemItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListItemItemAccessWhoItemItem: "%v"`, tn.TypeName)
	}
}

func __marshalAccessProviderWhoListItemItemAccessWhoItemItem(v *AccessProviderWhoListItemItemAccessWhoItemItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AccessProviderWhoListItemItemAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemGroup
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *AccessProviderWhoListItemItemUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*AccessProviderWhoListItemItemUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AccessProviderWhoListItemItemAccessWhoItemItem: "%T"`, v)
	}
}

// AccessProviderWhoListItemItemGroup includes the requested fields of the GraphQL type Group.
type AccessProviderWhoListItemItemGroup struct {
	Typename      *string                                         `json:"__typename"`
	Name          string                                          `json:"name"`
	Id            string                                          `json:"id"`
	IdentityStore AccessProviderWhoListItemItemGroupIdentityStore `json:"identityStore"`
}

// GetTypename returns AccessProviderWhoListItemItemGroup.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetTypename() *string { return v.Typename }

// GetName returns AccessProviderWhoListItemItemGroup.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetName() string { return v.Name }

// GetId returns AccessProviderWhoListItemItemGroup.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetId() string { return v.Id }

// GetIdentityStore returns AccessProviderWhoListItemItemGroup.IdentityStore, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroup) GetIdentityStore() AccessProviderWhoListItemItemGroupIdentityStore {
	return v.IdentityStore
}

// AccessProviderWhoListItemItemGroupIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type AccessProviderWhoListItemItemGroupIdentityStore struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns AccessProviderWhoListItemItemGroupIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroupIdentityStore) GetId() string { return v.Id }

// GetName returns AccessProviderWhoListItemItemGroupIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemGroupIdentityStore) GetName() string { return v.Name }

// AccessProviderWhoListItemItemNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AccessProviderWhoListItemItemNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns AccessProviderWhoListItemItemNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemNotFoundError) GetTypename() *string { return v.Typename }

// AccessProviderWhoListItemItemUser includes the requested fields of the GraphQL type User.
type AccessProviderWhoListItemItemUser struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
	Id       string  `json:"id"`
}

// GetTypename returns AccessProviderWhoListItemItemUser.Typename, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetTypename() *string { return v.Typename }

// GetName returns AccessProviderWhoListItemItemUser.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetName() string { return v.Name }

// GetId returns AccessProviderWhoListItemItemUser.Id, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListItemItemUser) GetId() string { return v.Id }

// AccessProviderWhoListPageInfo includes the requested fields of the GraphQL type PageInfo.
type AccessProviderWhoListPageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns AccessProviderWhoListPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListPageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns AccessProviderWhoListPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoListPageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *AccessProviderWhoListPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccessProviderWhoListPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.AccessProviderWhoListPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccessProviderWhoListPageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *AccessProviderWhoListPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccessProviderWhoListPageInfo) __premarshalJSON() (*__premarshalAccessProviderWhoListPageInfo, error) {
	var retval __premarshalAccessProviderWhoListPageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

type AccessProviderWhoOrderByInput struct {
	Name *Sort `json:"name"`
}

// GetName returns AccessProviderWhoOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessProviderWhoOrderByInput) GetName() *Sort { return v.Name }

type AccessWhatOrderByInput struct {
	Name *Sort `json:"name"`
}

// GetName returns AccessWhatOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *AccessWhatOrderByInput) GetName() *Sort { return v.Name }

type AccessWhoItemType string

const (
	AccessWhoItemTypeWhogrant   AccessWhoItemType = "WhoGrant"
	AccessWhoItemTypeWhopromise AccessWhoItemType = "WhoPromise"
)

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSource includes the requested fields of the GraphQL type DataSource.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetTypename() *string {
	return v.Typename
}

// GetId returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Id, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetId() string {
	return v.DataSource.Id
}

// GetName returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Name, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetName() string {
	return v.DataSource.Name
}

// GetType returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Type, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetType() string {
	return v.DataSource.Type
}

// GetDescription returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Description, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSource.Parent, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult is implemented by the following types:
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSource
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) implementsGraphQLInterfaceAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult() {
}

func __unmarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(b []byte, v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult: "%T"`, v)
	}
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError, error) {
	var retval __premarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// AddIdentityStoreToDataSourceResponse is returned by AddIdentityStoreToDataSource on success.
type AddIdentityStoreToDataSourceResponse struct {
	AddIdentityStoreToDataSource AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult `json:"-"`
}

// GetAddIdentityStoreToDataSource returns AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource, and is useful for accessing the field via an interface.
func (v *AddIdentityStoreToDataSourceResponse) GetAddIdentityStoreToDataSource() AddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult {
	return v.AddIdentityStoreToDataSource
}

func (v *AddIdentityStoreToDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddIdentityStoreToDataSourceResponse
		AddIdentityStoreToDataSource json.RawMessage `json:"addIdentityStoreToDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AddIdentityStoreToDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddIdentityStoreToDataSource
		src := firstPass.AddIdentityStoreToDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAddIdentityStoreToDataSourceResponse struct {
	AddIdentityStoreToDataSource json.RawMessage `json:"addIdentityStoreToDataSource"`
}

func (v *AddIdentityStoreToDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddIdentityStoreToDataSourceResponse) __premarshalJSON() (*__premarshalAddIdentityStoreToDataSourceResponse, error) {
	var retval __premarshalAddIdentityStoreToDataSourceResponse

	{

		dst := &retval.AddIdentityStoreToDataSource
		src := v.AddIdentityStoreToDataSource
		var err error
		*dst, err = __marshalAddIdentityStoreToDataSourceAddIdentityStoreToDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AddIdentityStoreToDataSourceResponse.AddIdentityStoreToDataSource: %w", err)
		}
	}
	return &retval, nil
}

// AlreadyExistsError includes the GraphQL fields of AlreadyExistsError requested by the fragment AlreadyExistsError.
type AlreadyExistsError struct {
	Message             string `json:"message"`
	Existing_element_id string `json:"existing_element_id"`
}

// GetMessage returns AlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *AlreadyExistsError) GetMessage() string { return v.Message }

// GetExisting_element_id returns AlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *AlreadyExistsError) GetExisting_element_id() string { return v.Existing_element_id }

type BinaryExpressionAggregatorOperator string

const (
	BinaryExpressionAggregatorOperatorAnd BinaryExpressionAggregatorOperator = "And"
	BinaryExpressionAggregatorOperatorOr  BinaryExpressionAggregatorOperator = "Or"
)

type BinaryExpressionUnaryExpressionOperator string

const (
	BinaryExpressionUnaryExpressionOperatorNot BinaryExpressionUnaryExpressionOperator = "Not"
)

// CreateAccessProviderCreateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type CreateAccessProviderCreateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns CreateAccessProviderCreateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns CreateAccessProviderCreateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns CreateAccessProviderCreateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns CreateAccessProviderCreateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns CreateAccessProviderCreateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns CreateAccessProviderCreateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns CreateAccessProviderCreateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns CreateAccessProviderCreateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns CreateAccessProviderCreateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetType returns CreateAccessProviderCreateAccessProvider.Type, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetType() *string { return v.AccessProvider.Type }

// GetDescription returns CreateAccessProviderCreateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns CreateAccessProviderCreateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetOverride returns CreateAccessProviderCreateAccessProvider.Override, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetOverride() bool {
	return v.AccessProvider.Override
}

// GetExternal returns CreateAccessProviderCreateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetNotInternalizable returns CreateAccessProviderCreateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetWhoLocked returns CreateAccessProviderCreateAccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhoLocked() *bool {
	return v.AccessProvider.WhoLocked
}

// GetWhoLockedReason returns CreateAccessProviderCreateAccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhoLockedReason() *string {
	return v.AccessProvider.WhoLockedReason
}

// GetInheritanceLocked returns CreateAccessProviderCreateAccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetInheritanceLocked() *bool {
	return v.AccessProvider.InheritanceLocked
}

// GetInheritanceLockedReason returns CreateAccessProviderCreateAccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetInheritanceLockedReason() *string {
	return v.AccessProvider.InheritanceLockedReason
}

// GetWhatLocked returns CreateAccessProviderCreateAccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhatLocked() *bool {
	return v.AccessProvider.WhatLocked
}

// GetWhatLockedReason returns CreateAccessProviderCreateAccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetWhatLockedReason() *string {
	return v.AccessProvider.WhatLockedReason
}

// GetNameLocked returns CreateAccessProviderCreateAccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNameLocked() *bool {
	return v.AccessProvider.NameLocked
}

// GetNameLockedReason returns CreateAccessProviderCreateAccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetNameLockedReason() *string {
	return v.AccessProvider.NameLockedReason
}

// GetDeleteLocked returns CreateAccessProviderCreateAccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetDeleteLocked() *bool {
	return v.AccessProvider.DeleteLocked
}

// GetDeleteLockedReason returns CreateAccessProviderCreateAccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetDeleteLockedReason() *string {
	return v.AccessProvider.DeleteLockedReason
}

// GetComplete returns CreateAccessProviderCreateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetDataSources returns CreateAccessProviderCreateAccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource {
	return v.AccessProvider.DataSources
}

func (v *CreateAccessProviderCreateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Type *string `json:"type"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	Override bool `json:"override"`

	External bool `json:"external"`

	NotInternalizable bool `json:"notInternalizable"`

	WhoLocked *bool `json:"whoLocked"`

	WhoLockedReason *string `json:"whoLockedReason"`

	InheritanceLocked *bool `json:"inheritanceLocked"`

	InheritanceLockedReason *string `json:"inheritanceLockedReason"`

	WhatLocked *bool `json:"whatLocked"`

	WhatLockedReason *string `json:"whatLockedReason"`

	NameLocked *bool `json:"nameLocked"`

	NameLockedReason *string `json:"nameLockedReason"`

	DeleteLocked *bool `json:"deleteLocked"`

	DeleteLockedReason *string `json:"deleteLockedReason"`

	Complete *bool `json:"complete"`

	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

func (v *CreateAccessProviderCreateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProvider) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProvider, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Type = v.AccessProvider.Type
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.Override = v.AccessProvider.Override
	retval.External = v.AccessProvider.External
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.WhoLocked = v.AccessProvider.WhoLocked
	retval.WhoLockedReason = v.AccessProvider.WhoLockedReason
	retval.InheritanceLocked = v.AccessProvider.InheritanceLocked
	retval.InheritanceLockedReason = v.AccessProvider.InheritanceLockedReason
	retval.WhatLocked = v.AccessProvider.WhatLocked
	retval.WhatLockedReason = v.AccessProvider.WhatLockedReason
	retval.NameLocked = v.AccessProvider.NameLocked
	retval.NameLockedReason = v.AccessProvider.NameLockedReason
	retval.DeleteLocked = v.AccessProvider.DeleteLocked
	retval.DeleteLockedReason = v.AccessProvider.DeleteLockedReason
	retval.Complete = v.AccessProvider.Complete
	retval.DataSources = v.AccessProvider.DataSources
	return &retval, nil
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests includes the requested fields of the GraphQL type AccessProviderWithOptionalAccessRequests.
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests struct {
	Typename       *string                                                                                                       `json:"__typename"`
	AccessProvider CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider                `json:"accessProvider"`
	AccessRequests []CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest `json:"accessRequests"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) GetTypename() *string {
	return v.Typename
}

// GetAccessProvider returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests.AccessProvider, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) GetAccessProvider() CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider {
	return v.AccessProvider
}

// GetAccessRequests returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests.AccessRequests, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) GetAccessRequests() []CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest {
	return v.AccessRequests
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider struct {
	Id     string                      `json:"id"`
	Name   string                      `json:"name"`
	State  models.AccessProviderState  `json:"state"`
	Action models.AccessProviderAction `json:"action"`
}

// GetId returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetId() string {
	return v.Id
}

// GetName returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetName() string {
	return v.Name
}

// GetState returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.State, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetState() models.AccessProviderState {
	return v.State
}

// GetAction returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessProvider) GetAction() models.AccessProviderAction {
	return v.Action
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest struct {
	Id   string  `json:"id"`
	Name *string `json:"name"`
}

// GetId returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest.Id, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest) GetId() string {
	return v.Id
}

// GetName returns CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest.Name, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsAccessRequestsAccessRequest) GetName() *string {
	return v.Name
}

// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult includes the requested fields of the GraphQL interface AccessProviderWithOptionalAccessRequestsResult.
//
// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult is implemented by the following types:
// CreateAccessProviderCreateAccessProvider
// CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests
// CreateAccessProviderCreateAccessProviderPermissionDeniedError
type CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult interface {
	implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateAccessProviderCreateAccessProvider) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}

func __unmarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(b []byte, v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(CreateAccessProviderCreateAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderWithOptionalAccessRequests":
		*v = new(CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateAccessProviderCreateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderWithOptionalAccessRequestsResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(v *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateAccessProviderCreateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateAccessProviderCreateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests:
		typename = "AccessProviderWithOptionalAccessRequests"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequests
		}{typename, v}
		return json.Marshal(result)
	case *CreateAccessProviderCreateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%T"`, v)
	}
}

// CreateAccessProviderCreateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateAccessProviderCreateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateAccessProviderCreateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateAccessProviderCreateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderCreateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderCreateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderCreateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalCreateAccessProviderCreateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateAccessProviderResponse is returned by CreateAccessProvider on success.
type CreateAccessProviderResponse struct {
	CreateAccessProvider CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult `json:"-"`
}

// GetCreateAccessProvider returns CreateAccessProviderResponse.CreateAccessProvider, and is useful for accessing the field via an interface.
func (v *CreateAccessProviderResponse) GetCreateAccessProvider() CreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult {
	return v.CreateAccessProvider
}

func (v *CreateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateAccessProviderResponse
		CreateAccessProvider json.RawMessage `json:"createAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateAccessProvider
		src := firstPass.CreateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateAccessProviderResponse.CreateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateAccessProviderResponse struct {
	CreateAccessProvider json.RawMessage `json:"createAccessProvider"`
}

func (v *CreateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateAccessProviderResponse) __premarshalJSON() (*__premarshalCreateAccessProviderResponse, error) {
	var retval __premarshalCreateAccessProviderResponse

	{

		dst := &retval.CreateAccessProvider
		src := v.CreateAccessProvider
		var err error
		*dst, err = __marshalCreateAccessProviderCreateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateAccessProviderResponse.CreateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// CreateDataSourceCreateDataSource includes the requested fields of the GraphQL type DataSource.
type CreateDataSourceCreateDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSource.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetTypename() *string { return v.Typename }

// GetId returns CreateDataSourceCreateDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetId() string { return v.DataSource.Id }

// GetName returns CreateDataSourceCreateDataSource.Name, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetName() string { return v.DataSource.Name }

// GetType returns CreateDataSourceCreateDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns CreateDataSourceCreateDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns CreateDataSourceCreateDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns CreateDataSourceCreateDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns CreateDataSourceCreateDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns CreateDataSourceCreateDataSource.Parent, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *CreateDataSourceCreateDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *CreateDataSourceCreateDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSource) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSource, error) {
	var retval __premarshalCreateDataSourceCreateDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// CreateDataSourceCreateDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// CreateDataSourceCreateDataSourceDataSourceResult is implemented by the following types:
// CreateDataSourceCreateDataSource
// CreateDataSourceCreateDataSourceNotFoundError
// CreateDataSourceCreateDataSourcePermissionDeniedError
type CreateDataSourceCreateDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateDataSourceCreateDataSource) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}
func (v *CreateDataSourceCreateDataSourceNotFoundError) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) implementsGraphQLInterfaceCreateDataSourceCreateDataSourceDataSourceResult() {
}

func __unmarshalCreateDataSourceCreateDataSourceDataSourceResult(b []byte, v *CreateDataSourceCreateDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(CreateDataSourceCreateDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateDataSourceCreateDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateDataSourceCreateDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateDataSourceCreateDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateDataSourceCreateDataSourceDataSourceResult(v *CreateDataSourceCreateDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateDataSourceCreateDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateDataSourceCreateDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateDataSourceCreateDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateDataSourceCreateDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateDataSourceCreateDataSourceDataSourceResult: "%T"`, v)
	}
}

// CreateDataSourceCreateDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateDataSourceCreateDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns CreateDataSourceCreateDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSourceNotFoundError) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSourceNotFoundError, error) {
	var retval __premarshalCreateDataSourceCreateDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateDataSourceCreateDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateDataSourceCreateDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateDataSourceCreateDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateDataSourceCreateDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceCreateDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceCreateDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataSourceCreateDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceCreateDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalCreateDataSourceCreateDataSourcePermissionDeniedError, error) {
	var retval __premarshalCreateDataSourceCreateDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateDataSourceResponse is returned by CreateDataSource on success.
type CreateDataSourceResponse struct {
	CreateDataSource CreateDataSourceCreateDataSourceDataSourceResult `json:"-"`
}

// GetCreateDataSource returns CreateDataSourceResponse.CreateDataSource, and is useful for accessing the field via an interface.
func (v *CreateDataSourceResponse) GetCreateDataSource() CreateDataSourceCreateDataSourceDataSourceResult {
	return v.CreateDataSource
}

func (v *CreateDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataSourceResponse
		CreateDataSource json.RawMessage `json:"createDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateDataSource
		src := firstPass.CreateDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateDataSourceCreateDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateDataSourceResponse.CreateDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateDataSourceResponse struct {
	CreateDataSource json.RawMessage `json:"createDataSource"`
}

func (v *CreateDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataSourceResponse) __premarshalJSON() (*__premarshalCreateDataSourceResponse, error) {
	var retval __premarshalCreateDataSourceResponse

	{

		dst := &retval.CreateDataSource
		src := v.CreateDataSource
		var err error
		*dst, err = __marshalCreateDataSourceCreateDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateDataSourceResponse.CreateDataSource: %w", err)
		}
	}
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type CreateIdentityStoreCreateIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns CreateIdentityStoreCreateIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns CreateIdentityStoreCreateIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns CreateIdentityStoreCreateIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns CreateIdentityStoreCreateIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns CreateIdentityStoreCreateIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns CreateIdentityStoreCreateIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns CreateIdentityStoreCreateIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns CreateIdentityStoreCreateIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *CreateIdentityStoreCreateIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *CreateIdentityStoreCreateIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStore) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStore, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type CreateIdentityStoreCreateIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns CreateIdentityStoreCreateIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// CreateIdentityStoreCreateIdentityStoreIdentityStoreResult is implemented by the following types:
// CreateIdentityStoreCreateIdentityStoreAlreadyExistsError
// CreateIdentityStoreCreateIdentityStore
// CreateIdentityStoreCreateIdentityStoreNotFoundError
// CreateIdentityStoreCreateIdentityStorePermissionDeniedError
type CreateIdentityStoreCreateIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStore) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) implementsGraphQLInterfaceCreateIdentityStoreCreateIdentityStoreIdentityStoreResult() {
}

func __unmarshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(b []byte, v *CreateIdentityStoreCreateIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(CreateIdentityStoreCreateIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(CreateIdentityStoreCreateIdentityStore)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(CreateIdentityStoreCreateIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(CreateIdentityStoreCreateIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateIdentityStoreCreateIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(v *CreateIdentityStoreCreateIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateIdentityStoreCreateIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *CreateIdentityStoreCreateIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateIdentityStoreCreateIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// CreateIdentityStoreCreateIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type CreateIdentityStoreCreateIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// CreateIdentityStoreCreateIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type CreateIdentityStoreCreateIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns CreateIdentityStoreCreateIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns CreateIdentityStoreCreateIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreCreateIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreCreateIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreCreateIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError, error) {
	var retval __premarshalCreateIdentityStoreCreateIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// CreateIdentityStoreResponse is returned by CreateIdentityStore on success.
type CreateIdentityStoreResponse struct {
	CreateIdentityStore CreateIdentityStoreCreateIdentityStoreIdentityStoreResult `json:"-"`
}

// GetCreateIdentityStore returns CreateIdentityStoreResponse.CreateIdentityStore, and is useful for accessing the field via an interface.
func (v *CreateIdentityStoreResponse) GetCreateIdentityStore() CreateIdentityStoreCreateIdentityStoreIdentityStoreResult {
	return v.CreateIdentityStore
}

func (v *CreateIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIdentityStoreResponse
		CreateIdentityStore json.RawMessage `json:"createIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateIdentityStore
		src := firstPass.CreateIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateIdentityStoreResponse.CreateIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateIdentityStoreResponse struct {
	CreateIdentityStore json.RawMessage `json:"createIdentityStore"`
}

func (v *CreateIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIdentityStoreResponse) __premarshalJSON() (*__premarshalCreateIdentityStoreResponse, error) {
	var retval __premarshalCreateIdentityStoreResponse

	{

		dst := &retval.CreateIdentityStore
		src := v.CreateIdentityStore
		var err error
		*dst, err = __marshalCreateIdentityStoreCreateIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateIdentityStoreResponse.CreateIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

type DataComparisonExpressionAggregatorInput struct {
	Operator BinaryExpressionAggregatorOperator `json:"operator"`
	Operands []DataComparisonExpressionInput    `json:"operands"`
}

// GetOperator returns DataComparisonExpressionAggregatorInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionAggregatorInput) GetOperator() BinaryExpressionAggregatorOperator {
	return v.Operator
}

// GetOperands returns DataComparisonExpressionAggregatorInput.Operands, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionAggregatorInput) GetOperands() []DataComparisonExpressionInput {
	return v.Operands
}

type DataComparisonExpressionComparisonInput struct {
	Operator     DataComparisonExpressionComparisonOperator `json:"operator"`
	LeftOperand  DataComparisonExpressionOperandInput       `json:"leftOperand"`
	RightOperand DataComparisonExpressionOperandInput       `json:"rightOperand"`
}

// GetOperator returns DataComparisonExpressionComparisonInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetOperator() DataComparisonExpressionComparisonOperator {
	return v.Operator
}

// GetLeftOperand returns DataComparisonExpressionComparisonInput.LeftOperand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetLeftOperand() DataComparisonExpressionOperandInput {
	return v.LeftOperand
}

// GetRightOperand returns DataComparisonExpressionComparisonInput.RightOperand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionComparisonInput) GetRightOperand() DataComparisonExpressionOperandInput {
	return v.RightOperand
}

type DataComparisonExpressionComparisonOperator string

const (
	DataComparisonExpressionComparisonOperatorEqual              DataComparisonExpressionComparisonOperator = "Equal"
	DataComparisonExpressionComparisonOperatorNotequal           DataComparisonExpressionComparisonOperator = "NotEqual"
	DataComparisonExpressionComparisonOperatorLessthan           DataComparisonExpressionComparisonOperator = "LessThan"
	DataComparisonExpressionComparisonOperatorLessthanorequal    DataComparisonExpressionComparisonOperator = "LessThanOrEqual"
	DataComparisonExpressionComparisonOperatorGreaterthan        DataComparisonExpressionComparisonOperator = "GreaterThan"
	DataComparisonExpressionComparisonOperatorGreaterthanorequal DataComparisonExpressionComparisonOperator = "GreaterThanOrEqual"
)

type DataComparisonExpressionEntityType string

const (
	DataComparisonExpressionEntityTypeDataobject DataComparisonExpressionEntityType = "DataObject"
)

type DataComparisonExpressionInput struct {
	Literal         *bool                                         `json:"literal"`
	Comparison      *DataComparisonExpressionComparisonInput      `json:"comparison"`
	Aggregator      *DataComparisonExpressionAggregatorInput      `json:"aggregator"`
	UnaryExpression *DataComparisonExpressionUnaryExpressionInput `json:"unaryExpression"`
}

// GetLiteral returns DataComparisonExpressionInput.Literal, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetLiteral() *bool { return v.Literal }

// GetComparison returns DataComparisonExpressionInput.Comparison, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetComparison() *DataComparisonExpressionComparisonInput {
	return v.Comparison
}

// GetAggregator returns DataComparisonExpressionInput.Aggregator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetAggregator() *DataComparisonExpressionAggregatorInput {
	return v.Aggregator
}

// GetUnaryExpression returns DataComparisonExpressionInput.UnaryExpression, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionInput) GetUnaryExpression() *DataComparisonExpressionUnaryExpressionInput {
	return v.UnaryExpression
}

type DataComparisonExpressionLiteral struct {
	Bool      *bool      `json:"bool"`
	Int       *int       `json:"int"`
	Float     *float64   `json:"float"`
	Str       *string    `json:"str"`
	Timestamp *time.Time `json:"timestamp"`
}

// GetBool returns DataComparisonExpressionLiteral.Bool, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetBool() *bool { return v.Bool }

// GetInt returns DataComparisonExpressionLiteral.Int, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetInt() *int { return v.Int }

// GetFloat returns DataComparisonExpressionLiteral.Float, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetFloat() *float64 { return v.Float }

// GetStr returns DataComparisonExpressionLiteral.Str, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetStr() *string { return v.Str }

// GetTimestamp returns DataComparisonExpressionLiteral.Timestamp, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionLiteral) GetTimestamp() *time.Time { return v.Timestamp }

type DataComparisonExpressionOperandInput struct {
	Reference *DataComparisonExpressionReferenceInput `json:"reference"`
	Literal   *DataComparisonExpressionLiteral        `json:"literal"`
}

// GetReference returns DataComparisonExpressionOperandInput.Reference, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionOperandInput) GetReference() *DataComparisonExpressionReferenceInput {
	return v.Reference
}

// GetLiteral returns DataComparisonExpressionOperandInput.Literal, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionOperandInput) GetLiteral() *DataComparisonExpressionLiteral {
	return v.Literal
}

type DataComparisonExpressionReferenceInput struct {
	EntityType DataComparisonExpressionEntityType `json:"entityType"`
	EntityId   string                             `json:"entityId"`
}

// GetEntityType returns DataComparisonExpressionReferenceInput.EntityType, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionReferenceInput) GetEntityType() DataComparisonExpressionEntityType {
	return v.EntityType
}

// GetEntityId returns DataComparisonExpressionReferenceInput.EntityId, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionReferenceInput) GetEntityId() string { return v.EntityId }

type DataComparisonExpressionUnaryExpressionInput struct {
	Operator BinaryExpressionUnaryExpressionOperator `json:"operator"`
	Operand  DataComparisonExpressionInput           `json:"operand"`
}

// GetOperator returns DataComparisonExpressionUnaryExpressionInput.Operator, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionUnaryExpressionInput) GetOperator() BinaryExpressionUnaryExpressionOperator {
	return v.Operator
}

// GetOperand returns DataComparisonExpressionUnaryExpressionInput.Operand, and is useful for accessing the field via an interface.
func (v *DataComparisonExpressionUnaryExpressionInput) GetOperand() DataComparisonExpressionInput {
	return v.Operand
}

// DataObject includes the GraphQL fields of DataObject requested by the fragment DataObject.
type DataObject struct {
	Id       string  `json:"id"`
	Name     string  `json:"name"`
	FullName string  `json:"fullName"`
	Type     string  `json:"type"`
	DataType *string `json:"dataType"`
	Deleted  bool    `json:"deleted"`
}

// GetId returns DataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObject) GetId() string { return v.Id }

// GetName returns DataObject.Name, and is useful for accessing the field via an interface.
func (v *DataObject) GetName() string { return v.Name }

// GetFullName returns DataObject.FullName, and is useful for accessing the field via an interface.
func (v *DataObject) GetFullName() string { return v.FullName }

// GetType returns DataObject.Type, and is useful for accessing the field via an interface.
func (v *DataObject) GetType() string { return v.Type }

// GetDataType returns DataObject.DataType, and is useful for accessing the field via an interface.
func (v *DataObject) GetDataType() *string { return v.DataType }

// GetDeleted returns DataObject.Deleted, and is useful for accessing the field via an interface.
func (v *DataObject) GetDeleted() bool { return v.Deleted }

// DataObjectByExternalIdDataObjectsPagedResult includes the requested fields of the GraphQL type PagedResult.
type DataObjectByExternalIdDataObjectsPagedResult struct {
	Edges []DataObjectByExternalIdDataObjectsPagedResultEdgesEdge `json:"edges"`
}

// GetEdges returns DataObjectByExternalIdDataObjectsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResult) GetEdges() []DataObjectByExternalIdDataObjectsPagedResultEdgesEdge {
	return v.Edges
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdge includes the requested fields of the GraphQL type Edge.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdge struct {
	Node *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem `json:"-"`
}

// GetNode returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) GetNode() *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem {
	return v.Node
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectByExternalIdDataObjectsPagedResultEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectByExternalIdDataObjectsPagedResultEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem)
			err = __unmarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdge) __premarshalJSON() (*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge, error) {
	var retval __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdge

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal DataObjectByExternalIdDataObjectsPagedResultEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject struct {
	Typename   *string `json:"__typename"`
	DataObject `json:"-"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetTypename() *string {
	return v.Typename
}

// GetId returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Id, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetId() string {
	return v.DataObject.Id
}

// GetName returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Name, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetName() string {
	return v.DataObject.Name
}

// GetFullName returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.FullName, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetFullName() string {
	return v.DataObject.FullName
}

// GetType returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Type, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetType() string {
	return v.DataObject.Type
}

// GetDataType returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.DataType, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDataType() *string {
	return v.DataObject.DataType
}

// GetDeleted returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject.Deleted, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) GetDeleted() bool {
	return v.DataObject.Deleted
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
		graphql.NoUnmarshalJSON
	}
	firstPass.DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataObject)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	FullName string `json:"fullName"`

	Type string `json:"type"`

	DataType *string `json:"dataType"`

	Deleted bool `json:"deleted"`
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) __premarshalJSON() (*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject, error) {
	var retval __premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject

	retval.Typename = v.Typename
	retval.Id = v.DataObject.Id
	retval.Name = v.DataObject.Name
	retval.FullName = v.DataObject.FullName
	retval.Type = v.DataObject.Type
	retval.DataType = v.DataObject.DataType
	retval.Deleted = v.DataObject.Deleted
	return &retval, nil
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem is implemented by the following types:
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask
// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask) implementsGraphQLInterfaceDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem() {
}

func __unmarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(b []byte, v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem(v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject:
		typename = "DataObject"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObject
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeItem: "%T"`, v)
	}
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJob) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeJobLogMsg) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodePromiseDetails) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRole) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignment) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeSearchResultItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTag) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeTaskNotification) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUser) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserSubtask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdDataObjectsPagedResultEdgesEdgeNodeUserTask) GetTypename() *string {
	return v.Typename
}

// DataObjectByExternalIdResponse is returned by DataObjectByExternalId on success.
type DataObjectByExternalIdResponse struct {
	DataObjects DataObjectByExternalIdDataObjectsPagedResult `json:"dataObjects"`
}

// GetDataObjects returns DataObjectByExternalIdResponse.DataObjects, and is useful for accessing the field via an interface.
func (v *DataObjectByExternalIdResponse) GetDataObjects() DataObjectByExternalIdDataObjectsPagedResult {
	return v.DataObjects
}

// DataSource includes the GraphQL fields of DataSource requested by the fragment DataSource.
type DataSource struct {
	Id          string                      `json:"id"`
	Name        string                      `json:"name"`
	Type        string                      `json:"type"`
	Description string                      `json:"description"`
	CreatedAt   time.Time                   `json:"createdAt"`
	ModifiedAt  time.Time                   `json:"modifiedAt"`
	SyncMethod  DataSourceSyncMethod        `json:"syncMethod"`
	Parent      *DataSourceParentDataSource `json:"parent"`
}

// GetId returns DataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSource) GetId() string { return v.Id }

// GetName returns DataSource.Name, and is useful for accessing the field via an interface.
func (v *DataSource) GetName() string { return v.Name }

// GetType returns DataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSource) GetType() string { return v.Type }

// GetDescription returns DataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSource) GetDescription() string { return v.Description }

// GetCreatedAt returns DataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns DataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetSyncMethod returns DataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSource) GetSyncMethod() DataSourceSyncMethod { return v.SyncMethod }

// GetParent returns DataSource.Parent, and is useful for accessing the field via an interface.
func (v *DataSource) GetParent() *DataSourceParentDataSource { return v.Parent }

type DataSourceFeatures string

const (
	DataSourceFeaturesColumnmasking DataSourceFeatures = "ColumnMasking"
	DataSourceFeaturesRowfiltering  DataSourceFeatures = "RowFiltering"
)

type DataSourceFilterInput struct {
	Types                 []string              `json:"types"`
	Search                *string               `json:"search"`
	Parent                *string               `json:"parent"`
	IncompleteDataWarning *bool                 `json:"incompleteDataWarning"`
	SupportedFeatures     []*DataSourceFeatures `json:"supportedFeatures"`
}

// GetTypes returns DataSourceFilterInput.Types, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetTypes() []string { return v.Types }

// GetSearch returns DataSourceFilterInput.Search, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetSearch() *string { return v.Search }

// GetParent returns DataSourceFilterInput.Parent, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetParent() *string { return v.Parent }

// GetIncompleteDataWarning returns DataSourceFilterInput.IncompleteDataWarning, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetIncompleteDataWarning() *bool { return v.IncompleteDataWarning }

// GetSupportedFeatures returns DataSourceFilterInput.SupportedFeatures, and is useful for accessing the field via an interface.
func (v *DataSourceFilterInput) GetSupportedFeatures() []*DataSourceFeatures {
	return v.SupportedFeatures
}

// DataSourceIdentityStoresDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceIdentityStoresDataSource struct {
	Typename       *string                                                          `json:"__typename"`
	IdentityStores []*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore `json:"identityStores"`
}

// GetTypename returns DataSourceIdentityStoresDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSource) GetTypename() *string { return v.Typename }

// GetIdentityStores returns DataSourceIdentityStoresDataSource.IdentityStores, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSource) GetIdentityStores() []*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore {
	return v.IdentityStores
}

// DataSourceIdentityStoresDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// DataSourceIdentityStoresDataSourceDataSourceResult is implemented by the following types:
// DataSourceIdentityStoresDataSource
// DataSourceIdentityStoresDataSourceNotFoundError
// DataSourceIdentityStoresDataSourcePermissionDeniedError
type DataSourceIdentityStoresDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourceIdentityStoresDataSource) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}
func (v *DataSourceIdentityStoresDataSourceNotFoundError) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) implementsGraphQLInterfaceDataSourceIdentityStoresDataSourceDataSourceResult() {
}

func __unmarshalDataSourceIdentityStoresDataSourceDataSourceResult(b []byte, v *DataSourceIdentityStoresDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(DataSourceIdentityStoresDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DataSourceIdentityStoresDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DataSourceIdentityStoresDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourceIdentityStoresDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourceIdentityStoresDataSourceDataSourceResult(v *DataSourceIdentityStoresDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourceIdentityStoresDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceIdentityStoresDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceIdentityStoresDataSourceNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceIdentityStoresDataSourceNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *DataSourceIdentityStoresDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourceIdentityStoresDataSourceDataSourceResult: "%T"`, v)
	}
}

// DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore struct {
	IdentityStore `json:"-"`
}

// GetId returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetId() string {
	return v.IdentityStore.Id
}

// GetName returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetName() string {
	return v.IdentityStore.Name
}

// GetType returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetType() string {
	return v.IdentityStore.Type
}

// GetDescription returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetMaster() bool {
	return v.IdentityStore.Master
}

// GetNative returns DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) GetNative() bool {
	return v.IdentityStore.Native
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresDataSourceIdentityStoresIdentityStore) __premarshalJSON() (*__premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore, error) {
	var retval __premarshalDataSourceIdentityStoresDataSourceIdentityStoresIdentityStore

	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// DataSourceIdentityStoresDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DataSourceIdentityStoresDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourceIdentityStoresDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// DataSourceIdentityStoresDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DataSourceIdentityStoresDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DataSourceIdentityStoresDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DataSourceIdentityStoresDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError, error) {
	var retval __premarshalDataSourceIdentityStoresDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DataSourceIdentityStoresResponse is returned by DataSourceIdentityStores on success.
type DataSourceIdentityStoresResponse struct {
	DataSource DataSourceIdentityStoresDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns DataSourceIdentityStoresResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceIdentityStoresResponse) GetDataSource() DataSourceIdentityStoresDataSourceDataSourceResult {
	return v.DataSource
}

func (v *DataSourceIdentityStoresResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceIdentityStoresResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceIdentityStoresResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDataSourceIdentityStoresDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourceIdentityStoresResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourceIdentityStoresResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *DataSourceIdentityStoresResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceIdentityStoresResponse) __premarshalJSON() (*__premarshalDataSourceIdentityStoresResponse, error) {
	var retval __premarshalDataSourceIdentityStoresResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalDataSourceIdentityStoresDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DataSourceIdentityStoresResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

type DataSourceInput struct {
	Name        *string               `json:"name"`
	Description *string               `json:"description"`
	Parent      *string               `json:"parent"`
	SyncMethod  *DataSourceSyncMethod `json:"syncMethod"`
}

// GetName returns DataSourceInput.Name, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetName() *string { return v.Name }

// GetDescription returns DataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetDescription() *string { return v.Description }

// GetParent returns DataSourceInput.Parent, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetParent() *string { return v.Parent }

// GetSyncMethod returns DataSourceInput.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSourceInput) GetSyncMethod() *DataSourceSyncMethod { return v.SyncMethod }

type DataSourceOrderByInput struct {
	Name *Sort `json:"name"`
}

// GetName returns DataSourceOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *DataSourceOrderByInput) GetName() *Sort { return v.Name }

// DataSourcePage includes the GraphQL fields of PagedResult requested by the fragment DataSourcePage.
type DataSourcePage struct {
	PageInfo *DataSourcePagePageInfo   `json:"pageInfo"`
	Edges    []DataSourcePageEdgesEdge `json:"edges"`
}

// GetPageInfo returns DataSourcePage.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcePage) GetPageInfo() *DataSourcePagePageInfo { return v.PageInfo }

// GetEdges returns DataSourcePage.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcePage) GetEdges() []DataSourcePageEdgesEdge { return v.Edges }

// DataSourcePageEdgesEdge includes the requested fields of the GraphQL type Edge.
type DataSourcePageEdgesEdge struct {
	Cursor *string                          `json:"cursor"`
	Node   *DataSourcePageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns DataSourcePageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns DataSourcePageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdge) GetNode() *DataSourcePageEdgesEdgeNodeItem { return v.Node }

func (v *DataSourcePageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DataSourcePageEdgesEdgeNodeItem)
			err = __unmarshalDataSourcePageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DataSourcePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourcePageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *DataSourcePageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePageEdgesEdge) __premarshalJSON() (*__premarshalDataSourcePageEdgesEdge, error) {
	var retval __premarshalDataSourcePageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalDataSourcePageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal DataSourcePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// DataSourcePageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DataSourcePageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type DataSourcePageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type DataSourcePageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type DataSourcePageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type DataSourcePageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type DataSourcePageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type DataSourcePageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type DataSourcePageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type DataSourcePageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type DataSourcePageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type DataSourcePageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type DataSourcePageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type DataSourcePageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourcePageEdgesEdgeNodeDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// GetId returns DataSourcePageEdgesEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetId() string { return v.DataSource.Id }

// GetName returns DataSourcePageEdgesEdgeNodeDataSource.Name, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetName() string { return v.DataSource.Name }

// GetType returns DataSourcePageEdgesEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns DataSourcePageEdgesEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns DataSourcePageEdgesEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns DataSourcePageEdgesEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns DataSourcePageEdgesEdgeNodeDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns DataSourcePageEdgesEdgeNodeDataSource.Parent, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePageEdgesEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePageEdgesEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcePageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePageEdgesEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcePageEdgesEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcePageEdgesEdgeNodeDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// DataSourcePageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type DataSourcePageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type DataSourcePageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeDatasourceNotification) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type DataSourcePageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type DataSourcePageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type DataSourcePageEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeInsightsResult) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type DataSourcePageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// DataSourcePageEdgesEdgeNodeItem is implemented by the following types:
// DataSourcePageEdgesEdgeNodeAccessProvider
// DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail
// DataSourcePageEdgesEdgeNodeAccessProviderMatch
// DataSourcePageEdgesEdgeNodeAccessRequest
// DataSourcePageEdgesEdgeNodeAccessRequestNotification
// DataSourcePageEdgesEdgeNodeAccessRequestWhatItem
// DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem
// DataSourcePageEdgesEdgeNodeAccessWhatItem
// DataSourcePageEdgesEdgeNodeAccessWhoItem
// DataSourcePageEdgesEdgeNodeAccount
// DataSourcePageEdgesEdgeNodeAuditDiffLog
// DataSourcePageEdgesEdgeNodeComment
// DataSourcePageEdgesEdgeNodeDataAccessReturnItem
// DataSourcePageEdgesEdgeNodeDataObject
// DataSourcePageEdgesEdgeNodeDataObjectType
// DataSourcePageEdgesEdgeNodeDataSource
// DataSourcePageEdgesEdgeNodeDataUsage
// DataSourcePageEdgesEdgeNodeDatasourceNotification
// DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification
// DataSourcePageEdgesEdgeNodeGroup
// DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem
// DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem
// DataSourcePageEdgesEdgeNodeIdentityStore
// DataSourcePageEdgesEdgeNodeInsightsResult
// DataSourcePageEdgesEdgeNodeIssue
// DataSourcePageEdgesEdgeNodeJob
// DataSourcePageEdgesEdgeNodeJobLogMsg
// DataSourcePageEdgesEdgeNodePromiseDetails
// DataSourcePageEdgesEdgeNodeRole
// DataSourcePageEdgesEdgeNodeRoleAssignment
// DataSourcePageEdgesEdgeNodeRoleAssignmentNotification
// DataSourcePageEdgesEdgeNodeSearchResultItem
// DataSourcePageEdgesEdgeNodeTag
// DataSourcePageEdgesEdgeNodeTask
// DataSourcePageEdgesEdgeNodeTaskNotification
// DataSourcePageEdgesEdgeNodeUser
// DataSourcePageEdgesEdgeNodeUserAccessReturnItem
// DataSourcePageEdgesEdgeNodeUserSubtask
// DataSourcePageEdgesEdgeNodeUserTask
type DataSourcePageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DataSourcePageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAccount) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeComment) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroup) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeIssue) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeJob) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRole) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTag) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUser) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}
func (v *DataSourcePageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceDataSourcePageEdgesEdgeNodeItem() {
}

func __unmarshalDataSourcePageEdgesEdgeNodeItem(b []byte, v *DataSourcePageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(DataSourcePageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(DataSourcePageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(DataSourcePageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(DataSourcePageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(DataSourcePageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(DataSourcePageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(DataSourcePageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(DataSourcePageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(DataSourcePageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(DataSourcePageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(DataSourcePageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(DataSourcePageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(DataSourcePageEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(DataSourcePageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(DataSourcePageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(DataSourcePageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(DataSourcePageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(DataSourcePageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(DataSourcePageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(DataSourcePageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(DataSourcePageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(DataSourcePageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(DataSourcePageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(DataSourcePageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(DataSourcePageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(DataSourcePageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(DataSourcePageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(DataSourcePageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourcePageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourcePageEdgesEdgeNodeItem(v *DataSourcePageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourcePageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDataSourcePageEdgesEdgeNodeDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *DataSourcePageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourcePageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourcePageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// DataSourcePageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type DataSourcePageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type DataSourcePageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type DataSourcePageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type DataSourcePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type DataSourcePageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type DataSourcePageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// DataSourcePageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type DataSourcePageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type DataSourcePageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type DataSourcePageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type DataSourcePageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type DataSourcePageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type DataSourcePageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type DataSourcePageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// DataSourcePageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type DataSourcePageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DataSourcePageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *DataSourcePageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// DataSourcePagePageInfo includes the requested fields of the GraphQL type PageInfo.
type DataSourcePagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns DataSourcePagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcePagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns DataSourcePagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcePagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *DataSourcePagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcePagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcePagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcePagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *DataSourcePagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcePagePageInfo) __premarshalJSON() (*__premarshalDataSourcePagePageInfo, error) {
	var retval __premarshalDataSourcePagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// DataSourceParentDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceParentDataSource struct {
	Id string `json:"id"`
}

// GetId returns DataSourceParentDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceParentDataSource) GetId() string { return v.Id }

type DataSourceSyncMethod string

const (
	DataSourceSyncMethodOnPrem             DataSourceSyncMethod = "ON_PREM"
	DataSourceSyncMethodCloudManualTrigger DataSourceSyncMethod = "CLOUD_MANUAL_TRIGGER"
)

// DeleteAccessProviderDeleteAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type DeleteAccessProviderDeleteAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns DeleteAccessProviderDeleteAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns DeleteAccessProviderDeleteAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns DeleteAccessProviderDeleteAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns DeleteAccessProviderDeleteAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns DeleteAccessProviderDeleteAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns DeleteAccessProviderDeleteAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns DeleteAccessProviderDeleteAccessProvider.State, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns DeleteAccessProviderDeleteAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetType returns DeleteAccessProviderDeleteAccessProvider.Type, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetType() *string { return v.AccessProvider.Type }

// GetDescription returns DeleteAccessProviderDeleteAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns DeleteAccessProviderDeleteAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetOverride returns DeleteAccessProviderDeleteAccessProvider.Override, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetOverride() bool {
	return v.AccessProvider.Override
}

// GetExternal returns DeleteAccessProviderDeleteAccessProvider.External, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetNotInternalizable returns DeleteAccessProviderDeleteAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetWhoLocked returns DeleteAccessProviderDeleteAccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhoLocked() *bool {
	return v.AccessProvider.WhoLocked
}

// GetWhoLockedReason returns DeleteAccessProviderDeleteAccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhoLockedReason() *string {
	return v.AccessProvider.WhoLockedReason
}

// GetInheritanceLocked returns DeleteAccessProviderDeleteAccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetInheritanceLocked() *bool {
	return v.AccessProvider.InheritanceLocked
}

// GetInheritanceLockedReason returns DeleteAccessProviderDeleteAccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetInheritanceLockedReason() *string {
	return v.AccessProvider.InheritanceLockedReason
}

// GetWhatLocked returns DeleteAccessProviderDeleteAccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhatLocked() *bool {
	return v.AccessProvider.WhatLocked
}

// GetWhatLockedReason returns DeleteAccessProviderDeleteAccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetWhatLockedReason() *string {
	return v.AccessProvider.WhatLockedReason
}

// GetNameLocked returns DeleteAccessProviderDeleteAccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNameLocked() *bool {
	return v.AccessProvider.NameLocked
}

// GetNameLockedReason returns DeleteAccessProviderDeleteAccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetNameLockedReason() *string {
	return v.AccessProvider.NameLockedReason
}

// GetDeleteLocked returns DeleteAccessProviderDeleteAccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetDeleteLocked() *bool {
	return v.AccessProvider.DeleteLocked
}

// GetDeleteLockedReason returns DeleteAccessProviderDeleteAccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetDeleteLockedReason() *string {
	return v.AccessProvider.DeleteLockedReason
}

// GetComplete returns DeleteAccessProviderDeleteAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetDataSources returns DeleteAccessProviderDeleteAccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource {
	return v.AccessProvider.DataSources
}

func (v *DeleteAccessProviderDeleteAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Type *string `json:"type"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	Override bool `json:"override"`

	External bool `json:"external"`

	NotInternalizable bool `json:"notInternalizable"`

	WhoLocked *bool `json:"whoLocked"`

	WhoLockedReason *string `json:"whoLockedReason"`

	InheritanceLocked *bool `json:"inheritanceLocked"`

	InheritanceLockedReason *string `json:"inheritanceLockedReason"`

	WhatLocked *bool `json:"whatLocked"`

	WhatLockedReason *string `json:"whatLockedReason"`

	NameLocked *bool `json:"nameLocked"`

	NameLockedReason *string `json:"nameLockedReason"`

	DeleteLocked *bool `json:"deleteLocked"`

	DeleteLockedReason *string `json:"deleteLockedReason"`

	Complete *bool `json:"complete"`

	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

func (v *DeleteAccessProviderDeleteAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProvider) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProvider, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Type = v.AccessProvider.Type
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.Override = v.AccessProvider.Override
	retval.External = v.AccessProvider.External
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.WhoLocked = v.AccessProvider.WhoLocked
	retval.WhoLockedReason = v.AccessProvider.WhoLockedReason
	retval.InheritanceLocked = v.AccessProvider.InheritanceLocked
	retval.InheritanceLockedReason = v.AccessProvider.InheritanceLockedReason
	retval.WhatLocked = v.AccessProvider.WhatLocked
	retval.WhatLockedReason = v.AccessProvider.WhatLockedReason
	retval.NameLocked = v.AccessProvider.NameLocked
	retval.NameLockedReason = v.AccessProvider.NameLockedReason
	retval.DeleteLocked = v.AccessProvider.DeleteLocked
	retval.DeleteLockedReason = v.AccessProvider.DeleteLockedReason
	retval.Complete = v.AccessProvider.Complete
	retval.DataSources = v.AccessProvider.DataSources
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// DeleteAccessProviderDeleteAccessProviderAccessProviderResult is implemented by the following types:
// DeleteAccessProviderDeleteAccessProvider
// DeleteAccessProviderDeleteAccessProviderNotFoundError
// DeleteAccessProviderDeleteAccessProviderPermissionDeniedError
type DeleteAccessProviderDeleteAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteAccessProviderDeleteAccessProvider) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) implementsGraphQLInterfaceDeleteAccessProviderDeleteAccessProviderAccessProviderResult() {
}

func __unmarshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(b []byte, v *DeleteAccessProviderDeleteAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(DeleteAccessProviderDeleteAccessProvider)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(DeleteAccessProviderDeleteAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteAccessProviderDeleteAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteAccessProviderDeleteAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(v *DeleteAccessProviderDeleteAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteAccessProviderDeleteAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteAccessProviderDeleteAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteAccessProviderDeleteAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// DeleteAccessProviderDeleteAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type DeleteAccessProviderDeleteAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteAccessProviderDeleteAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProviderNotFoundError) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// DeleteAccessProviderDeleteAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteAccessProviderDeleteAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteAccessProviderDeleteAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteAccessProviderDeleteAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderDeleteAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderDeleteAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderDeleteAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError, error) {
	var retval __premarshalDeleteAccessProviderDeleteAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteAccessProviderResponse is returned by DeleteAccessProvider on success.
type DeleteAccessProviderResponse struct {
	DeleteAccessProvider DeleteAccessProviderDeleteAccessProviderAccessProviderResult `json:"-"`
}

// GetDeleteAccessProvider returns DeleteAccessProviderResponse.DeleteAccessProvider, and is useful for accessing the field via an interface.
func (v *DeleteAccessProviderResponse) GetDeleteAccessProvider() DeleteAccessProviderDeleteAccessProviderAccessProviderResult {
	return v.DeleteAccessProvider
}

func (v *DeleteAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAccessProviderResponse
		DeleteAccessProvider json.RawMessage `json:"deleteAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteAccessProvider
		src := firstPass.DeleteAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteAccessProviderResponse.DeleteAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteAccessProviderResponse struct {
	DeleteAccessProvider json.RawMessage `json:"deleteAccessProvider"`
}

func (v *DeleteAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAccessProviderResponse) __premarshalJSON() (*__premarshalDeleteAccessProviderResponse, error) {
	var retval __premarshalDeleteAccessProviderResponse

	{

		dst := &retval.DeleteAccessProvider
		src := v.DeleteAccessProvider
		var err error
		*dst, err = __marshalDeleteAccessProviderDeleteAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteAccessProviderResponse.DeleteAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// DeleteDataSourceDeleteDataSource includes the requested fields of the GraphQL type DeleteDataSource.
type DeleteDataSourceDeleteDataSource struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns DeleteDataSourceDeleteDataSource.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSource) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteDataSourceDeleteDataSource.Success, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSource) GetSuccess() bool { return v.Success }

// DeleteDataSourceDeleteDataSourceDeleteDataSourceResult includes the requested fields of the GraphQL interface DeleteDataSourceResult.
//
// DeleteDataSourceDeleteDataSourceDeleteDataSourceResult is implemented by the following types:
// DeleteDataSourceDeleteDataSource
// DeleteDataSourceDeleteDataSourcePermissionDeniedError
type DeleteDataSourceDeleteDataSourceDeleteDataSourceResult interface {
	implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteDataSourceDeleteDataSource) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) implementsGraphQLInterfaceDeleteDataSourceDeleteDataSourceDeleteDataSourceResult() {
}

func __unmarshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(b []byte, v *DeleteDataSourceDeleteDataSourceDeleteDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeleteDataSource":
		*v = new(DeleteDataSourceDeleteDataSource)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteDataSourceDeleteDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeleteDataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteDataSourceDeleteDataSourceDeleteDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(v *DeleteDataSourceDeleteDataSourceDeleteDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteDataSourceDeleteDataSource:
		typename = "DeleteDataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteDataSourceDeleteDataSource
		}{typename, v}
		return json.Marshal(result)
	case *DeleteDataSourceDeleteDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteDataSourceDeleteDataSourceDeleteDataSourceResult: "%T"`, v)
	}
}

// DeleteDataSourceDeleteDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteDataSourceDeleteDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteDataSourceDeleteDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteDataSourceDeleteDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteDataSourceDeleteDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteDataSourceDeleteDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteDataSourceDeleteDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError, error) {
	var retval __premarshalDeleteDataSourceDeleteDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	DeleteDataSource DeleteDataSourceDeleteDataSourceDeleteDataSourceResult `json:"-"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() DeleteDataSourceDeleteDataSourceDeleteDataSourceResult {
	return v.DeleteDataSource
}

func (v *DeleteDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteDataSourceResponse
		DeleteDataSource json.RawMessage `json:"deleteDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteDataSource
		src := firstPass.DeleteDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteDataSourceResponse.DeleteDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteDataSourceResponse struct {
	DeleteDataSource json.RawMessage `json:"deleteDataSource"`
}

func (v *DeleteDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteDataSourceResponse) __premarshalJSON() (*__premarshalDeleteDataSourceResponse, error) {
	var retval __premarshalDeleteDataSourceResponse

	{

		dst := &retval.DeleteDataSource
		src := v.DeleteDataSource
		var err error
		*dst, err = __marshalDeleteDataSourceDeleteDataSourceDeleteDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteDataSourceResponse.DeleteDataSource: %w", err)
		}
	}
	return &retval, nil
}

// DeleteIdentityStoreDeleteIdentityStore includes the requested fields of the GraphQL type DeleteIdentityStore.
type DeleteIdentityStoreDeleteIdentityStore struct {
	Typename *string `json:"__typename"`
	Success  bool    `json:"success"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStore) GetTypename() *string { return v.Typename }

// GetSuccess returns DeleteIdentityStoreDeleteIdentityStore.Success, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStore) GetSuccess() bool { return v.Success }

// DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult includes the requested fields of the GraphQL interface DeleteIdentityStoreResult.
//
// DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult is implemented by the following types:
// DeleteIdentityStoreDeleteIdentityStore
// DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
type DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult interface {
	implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteIdentityStoreDeleteIdentityStore) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) implementsGraphQLInterfaceDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult() {
}

func __unmarshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(b []byte, v *DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DeleteIdentityStore":
		*v = new(DeleteIdentityStoreDeleteIdentityStore)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DeleteIdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(v *DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteIdentityStoreDeleteIdentityStore:
		typename = "DeleteIdentityStore"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteIdentityStoreDeleteIdentityStore
		}{typename, v}
		return json.Marshal(result)
	case *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult: "%T"`, v)
	}
}

// DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteIdentityStoreDeleteIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError, error) {
	var retval __premarshalDeleteIdentityStoreDeleteIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// DeleteIdentityStoreResponse is returned by DeleteIdentityStore on success.
type DeleteIdentityStoreResponse struct {
	DeleteIdentityStore DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult `json:"-"`
}

// GetDeleteIdentityStore returns DeleteIdentityStoreResponse.DeleteIdentityStore, and is useful for accessing the field via an interface.
func (v *DeleteIdentityStoreResponse) GetDeleteIdentityStore() DeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult {
	return v.DeleteIdentityStore
}

func (v *DeleteIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteIdentityStoreResponse
		DeleteIdentityStore json.RawMessage `json:"deleteIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DeleteIdentityStore
		src := firstPass.DeleteIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DeleteIdentityStoreResponse.DeleteIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteIdentityStoreResponse struct {
	DeleteIdentityStore json.RawMessage `json:"deleteIdentityStore"`
}

func (v *DeleteIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteIdentityStoreResponse) __premarshalJSON() (*__premarshalDeleteIdentityStoreResponse, error) {
	var retval __premarshalDeleteIdentityStoreResponse

	{

		dst := &retval.DeleteIdentityStore
		src := v.DeleteIdentityStore
		var err error
		*dst, err = __marshalDeleteIdentityStoreDeleteIdentityStoreDeleteIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DeleteIdentityStoreResponse.DeleteIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns GetAccessProviderAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns GetAccessProviderAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetIsSample() bool { return v.AccessProvider.IsSample }

// GetCreatedAt returns GetAccessProviderAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetCreatedAt() time.Time { return v.AccessProvider.CreatedAt }

// GetModifiedAt returns GetAccessProviderAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns GetAccessProviderAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns GetAccessProviderAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNamingHint() *string { return v.AccessProvider.NamingHint }

// GetState returns GetAccessProviderAccessProvider.State, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns GetAccessProviderAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetType returns GetAccessProviderAccessProvider.Type, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetType() *string { return v.AccessProvider.Type }

// GetDescription returns GetAccessProviderAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns GetAccessProviderAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetPolicyRule() *string { return v.AccessProvider.PolicyRule }

// GetOverride returns GetAccessProviderAccessProvider.Override, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetOverride() bool { return v.AccessProvider.Override }

// GetExternal returns GetAccessProviderAccessProvider.External, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetExternal() bool { return v.AccessProvider.External }

// GetNotInternalizable returns GetAccessProviderAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetWhoLocked returns GetAccessProviderAccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhoLocked() *bool { return v.AccessProvider.WhoLocked }

// GetWhoLockedReason returns GetAccessProviderAccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhoLockedReason() *string {
	return v.AccessProvider.WhoLockedReason
}

// GetInheritanceLocked returns GetAccessProviderAccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetInheritanceLocked() *bool {
	return v.AccessProvider.InheritanceLocked
}

// GetInheritanceLockedReason returns GetAccessProviderAccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetInheritanceLockedReason() *string {
	return v.AccessProvider.InheritanceLockedReason
}

// GetWhatLocked returns GetAccessProviderAccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhatLocked() *bool { return v.AccessProvider.WhatLocked }

// GetWhatLockedReason returns GetAccessProviderAccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetWhatLockedReason() *string {
	return v.AccessProvider.WhatLockedReason
}

// GetNameLocked returns GetAccessProviderAccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNameLocked() *bool { return v.AccessProvider.NameLocked }

// GetNameLockedReason returns GetAccessProviderAccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetNameLockedReason() *string {
	return v.AccessProvider.NameLockedReason
}

// GetDeleteLocked returns GetAccessProviderAccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetDeleteLocked() *bool {
	return v.AccessProvider.DeleteLocked
}

// GetDeleteLockedReason returns GetAccessProviderAccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetDeleteLockedReason() *string {
	return v.AccessProvider.DeleteLockedReason
}

// GetComplete returns GetAccessProviderAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetComplete() *bool { return v.AccessProvider.Complete }

// GetDataSources returns GetAccessProviderAccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource {
	return v.AccessProvider.DataSources
}

func (v *GetAccessProviderAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Type *string `json:"type"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	Override bool `json:"override"`

	External bool `json:"external"`

	NotInternalizable bool `json:"notInternalizable"`

	WhoLocked *bool `json:"whoLocked"`

	WhoLockedReason *string `json:"whoLockedReason"`

	InheritanceLocked *bool `json:"inheritanceLocked"`

	InheritanceLockedReason *string `json:"inheritanceLockedReason"`

	WhatLocked *bool `json:"whatLocked"`

	WhatLockedReason *string `json:"whatLockedReason"`

	NameLocked *bool `json:"nameLocked"`

	NameLockedReason *string `json:"nameLockedReason"`

	DeleteLocked *bool `json:"deleteLocked"`

	DeleteLockedReason *string `json:"deleteLockedReason"`

	Complete *bool `json:"complete"`

	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

func (v *GetAccessProviderAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderAccessProvider, error) {
	var retval __premarshalGetAccessProviderAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Type = v.AccessProvider.Type
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.Override = v.AccessProvider.Override
	retval.External = v.AccessProvider.External
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.WhoLocked = v.AccessProvider.WhoLocked
	retval.WhoLockedReason = v.AccessProvider.WhoLockedReason
	retval.InheritanceLocked = v.AccessProvider.InheritanceLocked
	retval.InheritanceLockedReason = v.AccessProvider.InheritanceLockedReason
	retval.WhatLocked = v.AccessProvider.WhatLocked
	retval.WhatLockedReason = v.AccessProvider.WhatLockedReason
	retval.NameLocked = v.AccessProvider.NameLocked
	retval.NameLockedReason = v.AccessProvider.NameLockedReason
	retval.DeleteLocked = v.AccessProvider.DeleteLocked
	retval.DeleteLockedReason = v.AccessProvider.DeleteLockedReason
	retval.Complete = v.AccessProvider.Complete
	retval.DataSources = v.AccessProvider.DataSources
	return &retval, nil
}

// GetAccessProviderAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderAccessProvider
// GetAccessProviderAccessProviderNotFoundError
// GetAccessProviderAccessProviderPermissionDeniedError
type GetAccessProviderAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderAccessProvider) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderAccessProvider)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderAccessProviderAccessProviderResult(v *GetAccessProviderAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetAccessProviderAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderResponse is returned by GetAccessProvider on success.
type GetAccessProviderResponse struct {
	AccessProvider GetAccessProviderAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderResponse) GetAccessProvider() GetAccessProviderAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderResponse) __premarshalJSON() (*__premarshalGetAccessProviderResponse, error) {
	var retval __premarshalGetAccessProviderResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderWhatDataObjectListAccessProvider struct {
	Typename        *string                                                                      `json:"__typename"`
	WhatDataObjects GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProvider) GetTypename() *string { return v.Typename }

// GetWhatDataObjects returns GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProvider) GetWhatDataObjects() GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults {
	return v.WhatDataObjects
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProvider
		WhatDataObjects json.RawMessage `json:"whatDataObjects"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhatDataObjects
		src := firstPass.WhatDataObjects
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProvider struct {
	Typename *string `json:"__typename"`

	WhatDataObjects json.RawMessage `json:"whatDataObjects"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProvider, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhatDataObjects
		src := v.WhatDataObjects
		var err error
		*dst, err = __marshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatDataObjectListAccessProvider.WhatDataObjects: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderWhatDataObjectListAccessProvider
// GetAccessProviderWhatDataObjectListAccessProviderNotFoundError
// GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
type GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatDataObjectListAccessProvider) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderWhatDataObjectListAccessProvider)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(v *GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatDataObjectListAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderWhatDataObjectListAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhatDataObjectListAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult includes the requested fields of the GraphQL type PagedResult.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult struct {
	Typename               *string `json:"__typename"`
	AccessProviderWhatList `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetPageInfo() *AccessProviderWhatListPageInfo {
	return v.AccessProviderWhatList.PageInfo
}

// GetEdges returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) GetEdges() []AccessProviderWhatListEdgesEdge {
	return v.AccessProviderWhatList.Edges
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhatList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhatListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhatListEdgesEdge `json:"edges"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhatList.PageInfo
	retval.Edges = v.AccessProviderWhatList.Edges
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults is implemented by the following types:
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults interface {
	implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults() {
}

func __unmarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(b []byte, v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PagedResult":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults(v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPagedResults: "%T"`, v)
	}
}

// GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListAccessProviderWhatDataObjectsPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhatDataObjectListResponse is returned by GetAccessProviderWhatDataObjectList on success.
type GetAccessProviderWhatDataObjectListResponse struct {
	AccessProvider GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderWhatDataObjectListResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhatDataObjectListResponse) GetAccessProvider() GetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderWhatDataObjectListResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhatDataObjectListResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhatDataObjectListResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhatDataObjectListResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhatDataObjectListResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderWhatDataObjectListResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhatDataObjectListResponse) __premarshalJSON() (*__premarshalGetAccessProviderWhatDataObjectListResponse, error) {
	var retval __premarshalGetAccessProviderWhatDataObjectListResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderWhatDataObjectListAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhatDataObjectListResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhoListAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type GetAccessProviderWhoListAccessProvider struct {
	Typename *string                                                   `json:"__typename"`
	WhoList  GetAccessProviderWhoListAccessProviderWhoListPagedResults `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProvider) GetTypename() *string { return v.Typename }

// GetWhoList returns GetAccessProviderWhoListAccessProvider.WhoList, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProvider) GetWhoList() GetAccessProviderWhoListAccessProviderWhoListPagedResults {
	return v.WhoList
}

func (v *GetAccessProviderWhoListAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProvider
		WhoList json.RawMessage `json:"whoList"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.WhoList
		src := firstPass.WhoList
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhoListAccessProvider.WhoList: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProvider struct {
	Typename *string `json:"__typename"`

	WhoList json.RawMessage `json:"whoList"`
}

func (v *GetAccessProviderWhoListAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProvider) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProvider, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProvider

	retval.Typename = v.Typename
	{

		dst := &retval.WhoList
		src := v.WhoList
		var err error
		*dst, err = __marshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhoListAccessProvider.WhoList: %w", err)
		}
	}
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderAccessProviderResult includes the requested fields of the GraphQL interface AccessProviderResult.
//
// GetAccessProviderWhoListAccessProviderAccessProviderResult is implemented by the following types:
// GetAccessProviderWhoListAccessProvider
// GetAccessProviderWhoListAccessProviderNotFoundError
// GetAccessProviderWhoListAccessProviderPermissionDeniedError
type GetAccessProviderWhoListAccessProviderAccessProviderResult interface {
	implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhoListAccessProvider) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderAccessProviderResult() {
}

func __unmarshalGetAccessProviderWhoListAccessProviderAccessProviderResult(b []byte, v *GetAccessProviderWhoListAccessProviderAccessProviderResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(GetAccessProviderWhoListAccessProvider)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetAccessProviderWhoListAccessProviderNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhoListAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderAccessProviderResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhoListAccessProviderAccessProviderResult(v *GetAccessProviderWhoListAccessProviderAccessProviderResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhoListAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderAccessProviderResult: "%T"`, v)
	}
}

// GetAccessProviderWhoListAccessProviderNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetAccessProviderWhoListAccessProviderNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderNotFoundError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderNotFoundError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhoListAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderWhoListPagedResult includes the requested fields of the GraphQL type PagedResult.
type GetAccessProviderWhoListAccessProviderWhoListPagedResult struct {
	Typename              *string `json:"__typename"`
	AccessProviderWhoList `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetTypename() *string {
	return v.Typename
}

// GetPageInfo returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetPageInfo() *AccessProviderWhoListPageInfo {
	return v.AccessProviderWhoList.PageInfo
}

// GetEdges returns GetAccessProviderWhoListAccessProviderWhoListPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) GetEdges() []AccessProviderWhoListEdgesEdge {
	return v.AccessProviderWhoList.Edges
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderWhoListPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderWhoListPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderWhoList)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderWhoListPageInfo `json:"pageInfo"`

	Edges []AccessProviderWhoListEdgesEdge `json:"edges"`
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderWhoList.PageInfo
	retval.Edges = v.AccessProviderWhoList.Edges
	return &retval, nil
}

// GetAccessProviderWhoListAccessProviderWhoListPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// GetAccessProviderWhoListAccessProviderWhoListPagedResults is implemented by the following types:
// GetAccessProviderWhoListAccessProviderWhoListPagedResult
// GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
type GetAccessProviderWhoListAccessProviderWhoListPagedResults interface {
	implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPagedResult) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) implementsGraphQLInterfaceGetAccessProviderWhoListAccessProviderWhoListPagedResults() {
}

func __unmarshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(b []byte, v *GetAccessProviderWhoListAccessProviderWhoListPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PagedResult":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderWhoListPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalGetAccessProviderWhoListAccessProviderWhoListPagedResults(v *GetAccessProviderWhoListAccessProviderWhoListPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAccessProviderWhoListAccessProviderWhoListPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderWhoListPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAccessProviderWhoListAccessProviderWhoListPagedResults: "%T"`, v)
	}
}

// GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError) __premarshalJSON() (*__premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError, error) {
	var retval __premarshalGetAccessProviderWhoListAccessProviderWhoListPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetAccessProviderWhoListResponse is returned by GetAccessProviderWhoList on success.
type GetAccessProviderWhoListResponse struct {
	AccessProvider GetAccessProviderWhoListAccessProviderAccessProviderResult `json:"-"`
}

// GetAccessProvider returns GetAccessProviderWhoListResponse.AccessProvider, and is useful for accessing the field via an interface.
func (v *GetAccessProviderWhoListResponse) GetAccessProvider() GetAccessProviderWhoListAccessProviderAccessProviderResult {
	return v.AccessProvider
}

func (v *GetAccessProviderWhoListResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAccessProviderWhoListResponse
		AccessProvider json.RawMessage `json:"accessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAccessProviderWhoListResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProvider
		src := firstPass.AccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAccessProviderWhoListAccessProviderAccessProviderResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAccessProviderWhoListResponse.AccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAccessProviderWhoListResponse struct {
	AccessProvider json.RawMessage `json:"accessProvider"`
}

func (v *GetAccessProviderWhoListResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAccessProviderWhoListResponse) __premarshalJSON() (*__premarshalGetAccessProviderWhoListResponse, error) {
	var retval __premarshalGetAccessProviderWhoListResponse

	{

		dst := &retval.AccessProvider
		src := v.AccessProvider
		var err error
		*dst, err = __marshalGetAccessProviderWhoListAccessProviderAccessProviderResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAccessProviderWhoListResponse.AccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// GetDataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type GetDataSourceDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns GetDataSourceDataSource.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetTypename() *string { return v.Typename }

// GetId returns GetDataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetId() string { return v.DataSource.Id }

// GetName returns GetDataSourceDataSource.Name, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetName() string { return v.DataSource.Name }

// GetType returns GetDataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns GetDataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns GetDataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns GetDataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns GetDataSourceDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns GetDataSourceDataSource.Parent, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSource) GetParent() *DataSourceParentDataSource { return v.DataSource.Parent }

func (v *GetDataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataSourceDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *GetDataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceDataSource) __premarshalJSON() (*__premarshalGetDataSourceDataSource, error) {
	var retval __premarshalGetDataSourceDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// GetDataSourceDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// GetDataSourceDataSourceDataSourceResult is implemented by the following types:
// GetDataSourceDataSource
// GetDataSourceDataSourceNotFoundError
// GetDataSourceDataSourcePermissionDeniedError
type GetDataSourceDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetDataSourceDataSource) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}
func (v *GetDataSourceDataSourceNotFoundError) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}
func (v *GetDataSourceDataSourcePermissionDeniedError) implementsGraphQLInterfaceGetDataSourceDataSourceDataSourceResult() {
}

func __unmarshalGetDataSourceDataSourceDataSourceResult(b []byte, v *GetDataSourceDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(GetDataSourceDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetDataSourceDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetDataSourceDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDataSourceDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetDataSourceDataSourceDataSourceResult(v *GetDataSourceDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDataSourceDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDataSourceDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetDataSourceDataSourceNotFoundError:
		typename = "NotFoundError"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDataSourceDataSourceNotFoundError
		}{typename, v}
		return json.Marshal(result)
	case *GetDataSourceDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDataSourceDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDataSourceDataSourceDataSourceResult: "%T"`, v)
	}
}

// GetDataSourceDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetDataSourceDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns GetDataSourceDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetDataSourceDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetDataSourceDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetDataSourceDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourcePermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetDataSourceDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetDataSourceDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetDataSourceDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetDataSourceDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetDataSourceDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalGetDataSourceDataSourcePermissionDeniedError, error) {
	var retval __premarshalGetDataSourceDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetDataSourceResponse is returned by GetDataSource on success.
type GetDataSourceResponse struct {
	DataSource GetDataSourceDataSourceDataSourceResult `json:"-"`
}

// GetDataSource returns GetDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *GetDataSourceResponse) GetDataSource() GetDataSourceDataSourceDataSourceResult {
	return v.DataSource
}

func (v *GetDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDataSourceResponse
		DataSource json.RawMessage `json:"dataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSource
		src := firstPass.DataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDataSourceDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDataSourceResponse.DataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDataSourceResponse struct {
	DataSource json.RawMessage `json:"dataSource"`
}

func (v *GetDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDataSourceResponse) __premarshalJSON() (*__premarshalGetDataSourceResponse, error) {
	var retval __premarshalGetDataSourceResponse

	{

		dst := &retval.DataSource
		src := v.DataSource
		var err error
		*dst, err = __marshalGetDataSourceDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDataSourceResponse.DataSource: %w", err)
		}
	}
	return &retval, nil
}

// GetIdentityStoreIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type GetIdentityStoreIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns GetIdentityStoreIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns GetIdentityStoreIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns GetIdentityStoreIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns GetIdentityStoreIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetDescription() string { return v.IdentityStore.Description }

// GetCreatedAt returns GetIdentityStoreIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetCreatedAt() time.Time { return v.IdentityStore.CreatedAt }

// GetModifiedAt returns GetIdentityStoreIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetModifiedAt() time.Time { return v.IdentityStore.ModifiedAt }

// GetMaster returns GetIdentityStoreIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns GetIdentityStoreIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *GetIdentityStoreIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *GetIdentityStoreIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStore) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStore, error) {
	var retval __premarshalGetIdentityStoreIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// GetIdentityStoreIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type GetIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns GetIdentityStoreIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalGetIdentityStoreIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// GetIdentityStoreIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// GetIdentityStoreIdentityStoreIdentityStoreResult is implemented by the following types:
// GetIdentityStoreIdentityStoreAlreadyExistsError
// GetIdentityStoreIdentityStore
// GetIdentityStoreIdentityStoreNotFoundError
// GetIdentityStoreIdentityStorePermissionDeniedError
type GetIdentityStoreIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *GetIdentityStoreIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStore) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStoreNotFoundError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) implementsGraphQLInterfaceGetIdentityStoreIdentityStoreIdentityStoreResult() {
}

func __unmarshalGetIdentityStoreIdentityStoreIdentityStoreResult(b []byte, v *GetIdentityStoreIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(GetIdentityStoreIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(GetIdentityStoreIdentityStore)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(GetIdentityStoreIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(GetIdentityStoreIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetIdentityStoreIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalGetIdentityStoreIdentityStoreIdentityStoreResult(v *GetIdentityStoreIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetIdentityStoreIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetIdentityStoreIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetIdentityStoreIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetIdentityStoreIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// GetIdentityStoreIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type GetIdentityStoreIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStoreNotFoundError, error) {
	var retval __premarshalGetIdentityStoreIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// GetIdentityStoreIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type GetIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns GetIdentityStoreIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns GetIdentityStoreIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIdentityStoreIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalGetIdentityStoreIdentityStorePermissionDeniedError, error) {
	var retval __premarshalGetIdentityStoreIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// GetIdentityStoreResponse is returned by GetIdentityStore on success.
type GetIdentityStoreResponse struct {
	IdentityStore GetIdentityStoreIdentityStoreIdentityStoreResult `json:"-"`
}

// GetIdentityStore returns GetIdentityStoreResponse.IdentityStore, and is useful for accessing the field via an interface.
func (v *GetIdentityStoreResponse) GetIdentityStore() GetIdentityStoreIdentityStoreIdentityStoreResult {
	return v.IdentityStore
}

func (v *GetIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIdentityStoreResponse
		IdentityStore json.RawMessage `json:"identityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.IdentityStore
		src := firstPass.IdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetIdentityStoreIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetIdentityStoreResponse.IdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetIdentityStoreResponse struct {
	IdentityStore json.RawMessage `json:"identityStore"`
}

func (v *GetIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIdentityStoreResponse) __premarshalJSON() (*__premarshalGetIdentityStoreResponse, error) {
	var retval __premarshalGetIdentityStoreResponse

	{

		dst := &retval.IdentityStore
		src := v.IdentityStore
		var err error
		*dst, err = __marshalGetIdentityStoreIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetIdentityStoreResponse.IdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// IdentityStore includes the GraphQL fields of IdentityStore requested by the fragment IdentityStore.
type IdentityStore struct {
	Id          string    `json:"id"`
	Name        string    `json:"name"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	ModifiedAt  time.Time `json:"modifiedAt"`
	Master      bool      `json:"master"`
	Native      bool      `json:"native"`
}

// GetId returns IdentityStore.Id, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetId() string { return v.Id }

// GetName returns IdentityStore.Name, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetName() string { return v.Name }

// GetType returns IdentityStore.Type, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetType() string { return v.Type }

// GetDescription returns IdentityStore.Description, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetDescription() string { return v.Description }

// GetCreatedAt returns IdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns IdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetMaster returns IdentityStore.Master, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetMaster() bool { return v.Master }

// GetNative returns IdentityStore.Native, and is useful for accessing the field via an interface.
func (v *IdentityStore) GetNative() bool { return v.Native }

type IdentityStoreFilterInput struct {
	Search      *string `json:"search"`
	Master      *bool   `json:"master"`
	Native      *bool   `json:"native"`
	CanBeMaster *bool   `json:"canBeMaster"`
	CanBeLinked *bool   `json:"canBeLinked"`
}

// GetSearch returns IdentityStoreFilterInput.Search, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetSearch() *string { return v.Search }

// GetMaster returns IdentityStoreFilterInput.Master, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetMaster() *bool { return v.Master }

// GetNative returns IdentityStoreFilterInput.Native, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetNative() *bool { return v.Native }

// GetCanBeMaster returns IdentityStoreFilterInput.CanBeMaster, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetCanBeMaster() *bool { return v.CanBeMaster }

// GetCanBeLinked returns IdentityStoreFilterInput.CanBeLinked, and is useful for accessing the field via an interface.
func (v *IdentityStoreFilterInput) GetCanBeLinked() *bool { return v.CanBeLinked }

type IdentityStoreInput struct {
	Description *string `json:"description"`
	Name        *string `json:"name"`
	Master      *bool   `json:"master"`
}

// GetDescription returns IdentityStoreInput.Description, and is useful for accessing the field via an interface.
func (v *IdentityStoreInput) GetDescription() *string { return v.Description }

// GetName returns IdentityStoreInput.Name, and is useful for accessing the field via an interface.
func (v *IdentityStoreInput) GetName() *string { return v.Name }

// GetMaster returns IdentityStoreInput.Master, and is useful for accessing the field via an interface.
func (v *IdentityStoreInput) GetMaster() *bool { return v.Master }

type IdentityStoreOrderByInput struct {
	Name        *Sort `json:"name"`
	Description *Sort `json:"description"`
}

// GetName returns IdentityStoreOrderByInput.Name, and is useful for accessing the field via an interface.
func (v *IdentityStoreOrderByInput) GetName() *Sort { return v.Name }

// GetDescription returns IdentityStoreOrderByInput.Description, and is useful for accessing the field via an interface.
func (v *IdentityStoreOrderByInput) GetDescription() *Sort { return v.Description }

// IdentityStorePage includes the GraphQL fields of PagedResult requested by the fragment IdentityStorePage.
type IdentityStorePage struct {
	PageInfo *IdentityStorePagePageInfo   `json:"pageInfo"`
	Edges    []IdentityStorePageEdgesEdge `json:"edges"`
}

// GetPageInfo returns IdentityStorePage.PageInfo, and is useful for accessing the field via an interface.
func (v *IdentityStorePage) GetPageInfo() *IdentityStorePagePageInfo { return v.PageInfo }

// GetEdges returns IdentityStorePage.Edges, and is useful for accessing the field via an interface.
func (v *IdentityStorePage) GetEdges() []IdentityStorePageEdgesEdge { return v.Edges }

// IdentityStorePageEdgesEdge includes the requested fields of the GraphQL type Edge.
type IdentityStorePageEdgesEdge struct {
	Cursor *string                             `json:"cursor"`
	Node   *IdentityStorePageEdgesEdgeNodeItem `json:"-"`
}

// GetCursor returns IdentityStorePageEdgesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdge) GetCursor() *string { return v.Cursor }

// GetNode returns IdentityStorePageEdgesEdge.Node, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdge) GetNode() *IdentityStorePageEdgesEdgeNodeItem { return v.Node }

func (v *IdentityStorePageEdgesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePageEdgesEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePageEdgesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(IdentityStorePageEdgesEdgeNodeItem)
			err = __unmarshalIdentityStorePageEdgesEdgeNodeItem(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal IdentityStorePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalIdentityStorePageEdgesEdge struct {
	Cursor *string `json:"cursor"`

	Node json.RawMessage `json:"node"`
}

func (v *IdentityStorePageEdgesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePageEdgesEdge) __premarshalJSON() (*__premarshalIdentityStorePageEdgesEdge, error) {
	var retval __premarshalIdentityStorePageEdgesEdge

	retval.Cursor = v.Cursor
	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalIdentityStorePageEdgesEdgeNodeItem(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal IdentityStorePageEdgesEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// IdentityStorePageEdgesEdgeNodeAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type IdentityStorePageEdgesEdgeNodeAccessProvider struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProvider) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail includes the requested fields of the GraphQL type AccessProviderMaskDetail.
type IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessProviderMatch includes the requested fields of the GraphQL type AccessProviderMatch.
type IdentityStorePageEdgesEdgeNodeAccessProviderMatch struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessProviderMatch.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMatch) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessRequest includes the requested fields of the GraphQL type AccessRequest.
type IdentityStorePageEdgesEdgeNodeAccessRequest struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequest.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequest) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessRequestNotification includes the requested fields of the GraphQL type AccessRequestNotification.
type IdentityStorePageEdgesEdgeNodeAccessRequestNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequestNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem includes the requested fields of the GraphQL type AccessRequestWhatItem.
type IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem includes the requested fields of the GraphQL type AccessWhatAccessProviderItem.
type IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeAccessWhatItem includes the requested fields of the GraphQL type AccessWhatItem.
type IdentityStorePageEdgesEdgeNodeAccessWhatItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhatItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccessWhoItem includes the requested fields of the GraphQL type AccessWhoItem.
type IdentityStorePageEdgesEdgeNodeAccessWhoItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccessWhoItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccessWhoItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type IdentityStorePageEdgesEdgeNodeAccount struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAccount) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeAuditDiffLog includes the requested fields of the GraphQL type AuditDiffLog.
type IdentityStorePageEdgesEdgeNodeAuditDiffLog struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeAuditDiffLog.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeAuditDiffLog) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeComment includes the requested fields of the GraphQL type Comment.
type IdentityStorePageEdgesEdgeNodeComment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeComment.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeComment) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataAccessReturnItem includes the requested fields of the GraphQL type DataAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataObject includes the requested fields of the GraphQL type DataObject.
type IdentityStorePageEdgesEdgeNodeDataObject struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObject.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObject) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataObjectType includes the requested fields of the GraphQL type DataObjectType.
type IdentityStorePageEdgesEdgeNodeDataObjectType struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataObjectType.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataObjectType) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type IdentityStorePageEdgesEdgeNodeDataSource struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataSource.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataSource) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDataUsage includes the requested fields of the GraphQL type DataUsage.
type IdentityStorePageEdgesEdgeNodeDataUsage struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDataUsage.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDataUsage) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeDatasourceNotification includes the requested fields of the GraphQL type DatasourceNotification.
type IdentityStorePageEdgesEdgeNodeDatasourceNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeDatasourceNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeDatasourceNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification includes the requested fields of the GraphQL type GlobalRoleAssignmentNotification.
type IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGroup includes the requested fields of the GraphQL type Group.
type IdentityStorePageEdgesEdgeNodeGroup struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroup.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroup) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem includes the requested fields of the GraphQL type GroupedDataAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem includes the requested fields of the GraphQL type GroupedUserAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type IdentityStorePageEdgesEdgeNodeIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns IdentityStorePageEdgesEdgeNodeIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns IdentityStorePageEdgesEdgeNodeIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns IdentityStorePageEdgesEdgeNodeIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns IdentityStorePageEdgesEdgeNodeIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns IdentityStorePageEdgesEdgeNodeIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns IdentityStorePageEdgesEdgeNodeIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns IdentityStorePageEdgesEdgeNodeIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns IdentityStorePageEdgesEdgeNodeIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePageEdgesEdgeNodeIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePageEdgesEdgeNodeIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIdentityStorePageEdgesEdgeNodeIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) __premarshalJSON() (*__premarshalIdentityStorePageEdgesEdgeNodeIdentityStore, error) {
	var retval __premarshalIdentityStorePageEdgesEdgeNodeIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// IdentityStorePageEdgesEdgeNodeInsightsResult includes the requested fields of the GraphQL type InsightsResult.
type IdentityStorePageEdgesEdgeNodeInsightsResult struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeInsightsResult.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeInsightsResult) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
type IdentityStorePageEdgesEdgeNodeIssue struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeIssue) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeItem includes the requested fields of the GraphQL interface Item.
//
// IdentityStorePageEdgesEdgeNodeItem is implemented by the following types:
// IdentityStorePageEdgesEdgeNodeAccessProvider
// IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail
// IdentityStorePageEdgesEdgeNodeAccessProviderMatch
// IdentityStorePageEdgesEdgeNodeAccessRequest
// IdentityStorePageEdgesEdgeNodeAccessRequestNotification
// IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem
// IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem
// IdentityStorePageEdgesEdgeNodeAccessWhatItem
// IdentityStorePageEdgesEdgeNodeAccessWhoItem
// IdentityStorePageEdgesEdgeNodeAccount
// IdentityStorePageEdgesEdgeNodeAuditDiffLog
// IdentityStorePageEdgesEdgeNodeComment
// IdentityStorePageEdgesEdgeNodeDataAccessReturnItem
// IdentityStorePageEdgesEdgeNodeDataObject
// IdentityStorePageEdgesEdgeNodeDataObjectType
// IdentityStorePageEdgesEdgeNodeDataSource
// IdentityStorePageEdgesEdgeNodeDataUsage
// IdentityStorePageEdgesEdgeNodeDatasourceNotification
// IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification
// IdentityStorePageEdgesEdgeNodeGroup
// IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem
// IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem
// IdentityStorePageEdgesEdgeNodeIdentityStore
// IdentityStorePageEdgesEdgeNodeInsightsResult
// IdentityStorePageEdgesEdgeNodeIssue
// IdentityStorePageEdgesEdgeNodeJob
// IdentityStorePageEdgesEdgeNodeJobLogMsg
// IdentityStorePageEdgesEdgeNodePromiseDetails
// IdentityStorePageEdgesEdgeNodeRole
// IdentityStorePageEdgesEdgeNodeRoleAssignment
// IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification
// IdentityStorePageEdgesEdgeNodeSearchResultItem
// IdentityStorePageEdgesEdgeNodeTag
// IdentityStorePageEdgesEdgeNodeTask
// IdentityStorePageEdgesEdgeNodeTaskNotification
// IdentityStorePageEdgesEdgeNodeUser
// IdentityStorePageEdgesEdgeNodeUserAccessReturnItem
// IdentityStorePageEdgesEdgeNodeUserSubtask
// IdentityStorePageEdgesEdgeNodeUserTask
type IdentityStorePageEdgesEdgeNodeItem interface {
	implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *IdentityStorePageEdgesEdgeNodeAccessProvider) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessProviderMatch) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequest) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhatItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccessWhoItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAccount) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeAuditDiffLog) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeComment) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObject) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataObjectType) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataSource) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDataUsage) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeDatasourceNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroup) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeIdentityStore) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeInsightsResult) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeIssue) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeJob) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeJobLogMsg) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodePromiseDetails) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRole) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignment) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeSearchResultItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTag) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeTaskNotification) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUser) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserSubtask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}
func (v *IdentityStorePageEdgesEdgeNodeUserTask) implementsGraphQLInterfaceIdentityStorePageEdgesEdgeNodeItem() {
}

func __unmarshalIdentityStorePageEdgesEdgeNodeItem(b []byte, v *IdentityStorePageEdgesEdgeNodeItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderMaskDetail":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail)
		return json.Unmarshal(b, *v)
	case "AccessProviderMatch":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessProviderMatch)
		return json.Unmarshal(b, *v)
	case "AccessRequest":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequest)
		return json.Unmarshal(b, *v)
	case "AccessRequestNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequestNotification)
		return json.Unmarshal(b, *v)
	case "AccessRequestWhatItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatAccessProviderItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem)
		return json.Unmarshal(b, *v)
	case "AccessWhatItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhatItem)
		return json.Unmarshal(b, *v)
	case "AccessWhoItem":
		*v = new(IdentityStorePageEdgesEdgeNodeAccessWhoItem)
		return json.Unmarshal(b, *v)
	case "Account":
		*v = new(IdentityStorePageEdgesEdgeNodeAccount)
		return json.Unmarshal(b, *v)
	case "AuditDiffLog":
		*v = new(IdentityStorePageEdgesEdgeNodeAuditDiffLog)
		return json.Unmarshal(b, *v)
	case "Comment":
		*v = new(IdentityStorePageEdgesEdgeNodeComment)
		return json.Unmarshal(b, *v)
	case "DataAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "DataObject":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObject)
		return json.Unmarshal(b, *v)
	case "DataObjectType":
		*v = new(IdentityStorePageEdgesEdgeNodeDataObjectType)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(IdentityStorePageEdgesEdgeNodeDataSource)
		return json.Unmarshal(b, *v)
	case "DataUsage":
		*v = new(IdentityStorePageEdgesEdgeNodeDataUsage)
		return json.Unmarshal(b, *v)
	case "DatasourceNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeDatasourceNotification)
		return json.Unmarshal(b, *v)
	case "GlobalRoleAssignmentNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "Group":
		*v = new(IdentityStorePageEdgesEdgeNodeGroup)
		return json.Unmarshal(b, *v)
	case "GroupedDataAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "GroupedUserAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(IdentityStorePageEdgesEdgeNodeIdentityStore)
		return json.Unmarshal(b, *v)
	case "InsightsResult":
		*v = new(IdentityStorePageEdgesEdgeNodeInsightsResult)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(IdentityStorePageEdgesEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "Job":
		*v = new(IdentityStorePageEdgesEdgeNodeJob)
		return json.Unmarshal(b, *v)
	case "JobLogMsg":
		*v = new(IdentityStorePageEdgesEdgeNodeJobLogMsg)
		return json.Unmarshal(b, *v)
	case "PromiseDetails":
		*v = new(IdentityStorePageEdgesEdgeNodePromiseDetails)
		return json.Unmarshal(b, *v)
	case "Role":
		*v = new(IdentityStorePageEdgesEdgeNodeRole)
		return json.Unmarshal(b, *v)
	case "RoleAssignment":
		*v = new(IdentityStorePageEdgesEdgeNodeRoleAssignment)
		return json.Unmarshal(b, *v)
	case "RoleAssignmentNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification)
		return json.Unmarshal(b, *v)
	case "SearchResultItem":
		*v = new(IdentityStorePageEdgesEdgeNodeSearchResultItem)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(IdentityStorePageEdgesEdgeNodeTag)
		return json.Unmarshal(b, *v)
	case "Task":
		*v = new(IdentityStorePageEdgesEdgeNodeTask)
		return json.Unmarshal(b, *v)
	case "TaskNotification":
		*v = new(IdentityStorePageEdgesEdgeNodeTaskNotification)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(IdentityStorePageEdgesEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "UserAccessReturnItem":
		*v = new(IdentityStorePageEdgesEdgeNodeUserAccessReturnItem)
		return json.Unmarshal(b, *v)
	case "UserSubtask":
		*v = new(IdentityStorePageEdgesEdgeNodeUserSubtask)
		return json.Unmarshal(b, *v)
	case "UserTask":
		*v = new(IdentityStorePageEdgesEdgeNodeUserTask)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Item.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for IdentityStorePageEdgesEdgeNodeItem: "%v"`, tn.TypeName)
	}
}

func __marshalIdentityStorePageEdgesEdgeNodeItem(v *IdentityStorePageEdgesEdgeNodeItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *IdentityStorePageEdgesEdgeNodeAccessProvider:
		typename = "AccessProvider"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProvider
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail:
		typename = "AccessProviderMaskDetail"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderMaskDetail
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessProviderMatch:
		typename = "AccessProviderMatch"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessProviderMatch
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequest:
		typename = "AccessRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequest
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequestNotification:
		typename = "AccessRequestNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequestNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem:
		typename = "AccessRequestWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessRequestWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem:
		typename = "AccessWhatAccessProviderItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhatAccessProviderItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhatItem:
		typename = "AccessWhatItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhatItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccessWhoItem:
		typename = "AccessWhoItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccessWhoItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAccount:
		typename = "Account"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAccount
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeAuditDiffLog:
		typename = "AuditDiffLog"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeAuditDiffLog
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeComment:
		typename = "Comment"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeComment
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataAccessReturnItem:
		typename = "DataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObject:
		typename = "DataObject"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObject
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataObjectType:
		typename = "DataObjectType"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataObjectType
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataSource
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDataUsage:
		typename = "DataUsage"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDataUsage
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeDatasourceNotification:
		typename = "DatasourceNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeDatasourceNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification:
		typename = "GlobalRoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGlobalRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroup:
		typename = "Group"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroup
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem:
		typename = "GroupedDataAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroupedDataAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem:
		typename = "GroupedUserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeGroupedUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalIdentityStorePageEdgesEdgeNodeIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeInsightsResult:
		typename = "InsightsResult"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeInsightsResult
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeJob:
		typename = "Job"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeJob
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeJobLogMsg:
		typename = "JobLogMsg"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeJobLogMsg
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodePromiseDetails:
		typename = "PromiseDetails"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodePromiseDetails
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRole:
		typename = "Role"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRole
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRoleAssignment:
		typename = "RoleAssignment"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRoleAssignment
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification:
		typename = "RoleAssignmentNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeSearchResultItem:
		typename = "SearchResultItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeSearchResultItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTag
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTask:
		typename = "Task"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTask
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeTaskNotification:
		typename = "TaskNotification"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeTaskNotification
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem:
		typename = "UserAccessReturnItem"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserAccessReturnItem
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserSubtask:
		typename = "UserSubtask"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserSubtask
		}{typename, v}
		return json.Marshal(result)
	case *IdentityStorePageEdgesEdgeNodeUserTask:
		typename = "UserTask"

		result := struct {
			TypeName string `json:"__typename"`
			*IdentityStorePageEdgesEdgeNodeUserTask
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for IdentityStorePageEdgesEdgeNodeItem: "%T"`, v)
	}
}

// IdentityStorePageEdgesEdgeNodeJob includes the requested fields of the GraphQL type Job.
type IdentityStorePageEdgesEdgeNodeJob struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeJob.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeJob) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeJobLogMsg includes the requested fields of the GraphQL type JobLogMsg.
type IdentityStorePageEdgesEdgeNodeJobLogMsg struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeJobLogMsg.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeJobLogMsg) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodePromiseDetails includes the requested fields of the GraphQL type PromiseDetails.
type IdentityStorePageEdgesEdgeNodePromiseDetails struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodePromiseDetails.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodePromiseDetails) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeRole includes the requested fields of the GraphQL type Role.
type IdentityStorePageEdgesEdgeNodeRole struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRole.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRole) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeRoleAssignment includes the requested fields of the GraphQL type RoleAssignment.
type IdentityStorePageEdgesEdgeNodeRoleAssignment struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRoleAssignment.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignment) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification includes the requested fields of the GraphQL type RoleAssignmentNotification.
type IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeRoleAssignmentNotification) GetTypename() *string {
	return v.Typename
}

// IdentityStorePageEdgesEdgeNodeSearchResultItem includes the requested fields of the GraphQL type SearchResultItem.
type IdentityStorePageEdgesEdgeNodeSearchResultItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeSearchResultItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeSearchResultItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTag includes the requested fields of the GraphQL type Tag.
type IdentityStorePageEdgesEdgeNodeTag struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTag.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTag) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTask includes the requested fields of the GraphQL type Task.
type IdentityStorePageEdgesEdgeNodeTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTask) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeTaskNotification includes the requested fields of the GraphQL type TaskNotification.
type IdentityStorePageEdgesEdgeNodeTaskNotification struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeTaskNotification.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeTaskNotification) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUser includes the requested fields of the GraphQL type User.
type IdentityStorePageEdgesEdgeNodeUser struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUser) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserAccessReturnItem includes the requested fields of the GraphQL type UserAccessReturnItem.
type IdentityStorePageEdgesEdgeNodeUserAccessReturnItem struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserAccessReturnItem.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserAccessReturnItem) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserSubtask includes the requested fields of the GraphQL type UserSubtask.
type IdentityStorePageEdgesEdgeNodeUserSubtask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserSubtask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserSubtask) GetTypename() *string { return v.Typename }

// IdentityStorePageEdgesEdgeNodeUserTask includes the requested fields of the GraphQL type UserTask.
type IdentityStorePageEdgesEdgeNodeUserTask struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns IdentityStorePageEdgesEdgeNodeUserTask.Typename, and is useful for accessing the field via an interface.
func (v *IdentityStorePageEdgesEdgeNodeUserTask) GetTypename() *string { return v.Typename }

// IdentityStorePagePageInfo includes the requested fields of the GraphQL type PageInfo.
type IdentityStorePagePageInfo struct {
	PageInfo `json:"-"`
}

// GetHasNextPage returns IdentityStorePagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *IdentityStorePagePageInfo) GetHasNextPage() *bool { return v.PageInfo.HasNextPage }

// GetStartCursor returns IdentityStorePagePageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *IdentityStorePagePageInfo) GetStartCursor() *string { return v.PageInfo.StartCursor }

func (v *IdentityStorePagePageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IdentityStorePagePageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.IdentityStorePagePageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIdentityStorePagePageInfo struct {
	HasNextPage *bool `json:"hasNextPage"`

	StartCursor *string `json:"startCursor"`
}

func (v *IdentityStorePagePageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IdentityStorePagePageInfo) __premarshalJSON() (*__premarshalIdentityStorePagePageInfo, error) {
	var retval __premarshalIdentityStorePagePageInfo

	retval.HasNextPage = v.PageInfo.HasNextPage
	retval.StartCursor = v.PageInfo.StartCursor
	return &retval, nil
}

// ListAccessProvidersAccessProvidersPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListAccessProvidersAccessProvidersPagedResult struct {
	Typename           *string `json:"__typename"`
	AccessProviderPage `json:"-"`
}

// GetTypename returns ListAccessProvidersAccessProvidersPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListAccessProvidersAccessProvidersPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetPageInfo() *AccessProviderPagePageInfo {
	return v.AccessProviderPage.PageInfo
}

// GetEdges returns ListAccessProvidersAccessProvidersPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPagedResult) GetEdges() []AccessProviderPageEdgesEdge {
	return v.AccessProviderPage.Edges
}

func (v *ListAccessProvidersAccessProvidersPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersAccessProvidersPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersAccessProvidersPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProviderPage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProvidersAccessProvidersPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *AccessProviderPagePageInfo `json:"pageInfo"`

	Edges []AccessProviderPageEdgesEdge `json:"edges"`
}

func (v *ListAccessProvidersAccessProvidersPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersAccessProvidersPagedResult) __premarshalJSON() (*__premarshalListAccessProvidersAccessProvidersPagedResult, error) {
	var retval __premarshalListAccessProvidersAccessProvidersPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.AccessProviderPage.PageInfo
	retval.Edges = v.AccessProviderPage.Edges
	return &retval, nil
}

// ListAccessProvidersAccessProvidersPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListAccessProvidersAccessProvidersPagedResults is implemented by the following types:
// ListAccessProvidersAccessProvidersPagedResult
// ListAccessProvidersAccessProvidersPermissionDeniedError
type ListAccessProvidersAccessProvidersPagedResults interface {
	implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListAccessProvidersAccessProvidersPagedResult) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) implementsGraphQLInterfaceListAccessProvidersAccessProvidersPagedResults() {
}

func __unmarshalListAccessProvidersAccessProvidersPagedResults(b []byte, v *ListAccessProvidersAccessProvidersPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PagedResult":
		*v = new(ListAccessProvidersAccessProvidersPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListAccessProvidersAccessProvidersPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListAccessProvidersAccessProvidersPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListAccessProvidersAccessProvidersPagedResults(v *ListAccessProvidersAccessProvidersPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListAccessProvidersAccessProvidersPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProvidersAccessProvidersPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListAccessProvidersAccessProvidersPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListAccessProvidersAccessProvidersPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListAccessProvidersAccessProvidersPagedResults: "%T"`, v)
	}
}

// ListAccessProvidersAccessProvidersPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListAccessProvidersAccessProvidersPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListAccessProvidersAccessProvidersPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListAccessProvidersAccessProvidersPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersAccessProvidersPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersAccessProvidersPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListAccessProvidersAccessProvidersPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersAccessProvidersPermissionDeniedError) __premarshalJSON() (*__premarshalListAccessProvidersAccessProvidersPermissionDeniedError, error) {
	var retval __premarshalListAccessProvidersAccessProvidersPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListAccessProvidersResponse is returned by ListAccessProviders on success.
type ListAccessProvidersResponse struct {
	AccessProviders ListAccessProvidersAccessProvidersPagedResults `json:"-"`
}

// GetAccessProviders returns ListAccessProvidersResponse.AccessProviders, and is useful for accessing the field via an interface.
func (v *ListAccessProvidersResponse) GetAccessProviders() ListAccessProvidersAccessProvidersPagedResults {
	return v.AccessProviders
}

func (v *ListAccessProvidersResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListAccessProvidersResponse
		AccessProviders json.RawMessage `json:"accessProviders"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListAccessProvidersResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AccessProviders
		src := firstPass.AccessProviders
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListAccessProvidersAccessProvidersPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListAccessProvidersResponse.AccessProviders: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListAccessProvidersResponse struct {
	AccessProviders json.RawMessage `json:"accessProviders"`
}

func (v *ListAccessProvidersResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListAccessProvidersResponse) __premarshalJSON() (*__premarshalListAccessProvidersResponse, error) {
	var retval __premarshalListAccessProvidersResponse

	{

		dst := &retval.AccessProviders
		src := v.AccessProviders
		var err error
		*dst, err = __marshalListAccessProvidersAccessProvidersPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListAccessProvidersResponse.AccessProviders: %w", err)
		}
	}
	return &retval, nil
}

// ListDataSourcesDataSourcesPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListDataSourcesDataSourcesPagedResult struct {
	Typename       *string `json:"__typename"`
	DataSourcePage `json:"-"`
}

// GetTypename returns ListDataSourcesDataSourcesPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListDataSourcesDataSourcesPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetPageInfo() *DataSourcePagePageInfo {
	return v.DataSourcePage.PageInfo
}

// GetEdges returns ListDataSourcesDataSourcesPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPagedResult) GetEdges() []DataSourcePageEdgesEdge {
	return v.DataSourcePage.Edges
}

func (v *ListDataSourcesDataSourcesPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesDataSourcesPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesDataSourcesPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourcePage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListDataSourcesDataSourcesPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *DataSourcePagePageInfo `json:"pageInfo"`

	Edges []DataSourcePageEdgesEdge `json:"edges"`
}

func (v *ListDataSourcesDataSourcesPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesDataSourcesPagedResult) __premarshalJSON() (*__premarshalListDataSourcesDataSourcesPagedResult, error) {
	var retval __premarshalListDataSourcesDataSourcesPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.DataSourcePage.PageInfo
	retval.Edges = v.DataSourcePage.Edges
	return &retval, nil
}

// ListDataSourcesDataSourcesPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListDataSourcesDataSourcesPagedResults is implemented by the following types:
// ListDataSourcesDataSourcesPagedResult
// ListDataSourcesDataSourcesPermissionDeniedError
type ListDataSourcesDataSourcesPagedResults interface {
	implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListDataSourcesDataSourcesPagedResult) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}
func (v *ListDataSourcesDataSourcesPermissionDeniedError) implementsGraphQLInterfaceListDataSourcesDataSourcesPagedResults() {
}

func __unmarshalListDataSourcesDataSourcesPagedResults(b []byte, v *ListDataSourcesDataSourcesPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PagedResult":
		*v = new(ListDataSourcesDataSourcesPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListDataSourcesDataSourcesPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListDataSourcesDataSourcesPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListDataSourcesDataSourcesPagedResults(v *ListDataSourcesDataSourcesPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListDataSourcesDataSourcesPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListDataSourcesDataSourcesPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListDataSourcesDataSourcesPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListDataSourcesDataSourcesPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListDataSourcesDataSourcesPagedResults: "%T"`, v)
	}
}

// ListDataSourcesDataSourcesPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListDataSourcesDataSourcesPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListDataSourcesDataSourcesPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPermissionDeniedError) GetTypename() *string { return v.Typename }

// GetMessage returns ListDataSourcesDataSourcesPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListDataSourcesDataSourcesPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesDataSourcesPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesDataSourcesPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListDataSourcesDataSourcesPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesDataSourcesPermissionDeniedError) __premarshalJSON() (*__premarshalListDataSourcesDataSourcesPermissionDeniedError, error) {
	var retval __premarshalListDataSourcesDataSourcesPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListDataSourcesResponse is returned by ListDataSources on success.
type ListDataSourcesResponse struct {
	DataSources ListDataSourcesDataSourcesPagedResults `json:"-"`
}

// GetDataSources returns ListDataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *ListDataSourcesResponse) GetDataSources() ListDataSourcesDataSourcesPagedResults {
	return v.DataSources
}

func (v *ListDataSourcesResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListDataSourcesResponse
		DataSources json.RawMessage `json:"dataSources"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListDataSourcesResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DataSources
		src := firstPass.DataSources
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListDataSourcesDataSourcesPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListDataSourcesResponse.DataSources: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListDataSourcesResponse struct {
	DataSources json.RawMessage `json:"dataSources"`
}

func (v *ListDataSourcesResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListDataSourcesResponse) __premarshalJSON() (*__premarshalListDataSourcesResponse, error) {
	var retval __premarshalListDataSourcesResponse

	{

		dst := &retval.DataSources
		src := v.DataSources
		var err error
		*dst, err = __marshalListDataSourcesDataSourcesPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListDataSourcesResponse.DataSources: %w", err)
		}
	}
	return &retval, nil
}

// ListIdentityStoresIdentityStoresPagedResult includes the requested fields of the GraphQL type PagedResult.
type ListIdentityStoresIdentityStoresPagedResult struct {
	Typename          *string `json:"__typename"`
	IdentityStorePage `json:"-"`
}

// GetTypename returns ListIdentityStoresIdentityStoresPagedResult.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetTypename() *string { return v.Typename }

// GetPageInfo returns ListIdentityStoresIdentityStoresPagedResult.PageInfo, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetPageInfo() *IdentityStorePagePageInfo {
	return v.IdentityStorePage.PageInfo
}

// GetEdges returns ListIdentityStoresIdentityStoresPagedResult.Edges, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPagedResult) GetEdges() []IdentityStorePageEdgesEdge {
	return v.IdentityStorePage.Edges
}

func (v *ListIdentityStoresIdentityStoresPagedResult) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresIdentityStoresPagedResult
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresIdentityStoresPagedResult = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStorePage)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListIdentityStoresIdentityStoresPagedResult struct {
	Typename *string `json:"__typename"`

	PageInfo *IdentityStorePagePageInfo `json:"pageInfo"`

	Edges []IdentityStorePageEdgesEdge `json:"edges"`
}

func (v *ListIdentityStoresIdentityStoresPagedResult) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresIdentityStoresPagedResult) __premarshalJSON() (*__premarshalListIdentityStoresIdentityStoresPagedResult, error) {
	var retval __premarshalListIdentityStoresIdentityStoresPagedResult

	retval.Typename = v.Typename
	retval.PageInfo = v.IdentityStorePage.PageInfo
	retval.Edges = v.IdentityStorePage.Edges
	return &retval, nil
}

// ListIdentityStoresIdentityStoresPagedResults includes the requested fields of the GraphQL interface PagedResults.
//
// ListIdentityStoresIdentityStoresPagedResults is implemented by the following types:
// ListIdentityStoresIdentityStoresPagedResult
// ListIdentityStoresIdentityStoresPermissionDeniedError
type ListIdentityStoresIdentityStoresPagedResults interface {
	implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ListIdentityStoresIdentityStoresPagedResult) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) implementsGraphQLInterfaceListIdentityStoresIdentityStoresPagedResults() {
}

func __unmarshalListIdentityStoresIdentityStoresPagedResults(b []byte, v *ListIdentityStoresIdentityStoresPagedResults) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PagedResult":
		*v = new(ListIdentityStoresIdentityStoresPagedResult)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(ListIdentityStoresIdentityStoresPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PagedResults.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ListIdentityStoresIdentityStoresPagedResults: "%v"`, tn.TypeName)
	}
}

func __marshalListIdentityStoresIdentityStoresPagedResults(v *ListIdentityStoresIdentityStoresPagedResults) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ListIdentityStoresIdentityStoresPagedResult:
		typename = "PagedResult"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListIdentityStoresIdentityStoresPagedResult
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ListIdentityStoresIdentityStoresPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalListIdentityStoresIdentityStoresPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ListIdentityStoresIdentityStoresPagedResults: "%T"`, v)
	}
}

// ListIdentityStoresIdentityStoresPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type ListIdentityStoresIdentityStoresPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns ListIdentityStoresIdentityStoresPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns ListIdentityStoresIdentityStoresPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresIdentityStoresPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresIdentityStoresPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListIdentityStoresIdentityStoresPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresIdentityStoresPermissionDeniedError) __premarshalJSON() (*__premarshalListIdentityStoresIdentityStoresPermissionDeniedError, error) {
	var retval __premarshalListIdentityStoresIdentityStoresPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// ListIdentityStoresResponse is returned by ListIdentityStores on success.
type ListIdentityStoresResponse struct {
	IdentityStores ListIdentityStoresIdentityStoresPagedResults `json:"-"`
}

// GetIdentityStores returns ListIdentityStoresResponse.IdentityStores, and is useful for accessing the field via an interface.
func (v *ListIdentityStoresResponse) GetIdentityStores() ListIdentityStoresIdentityStoresPagedResults {
	return v.IdentityStores
}

func (v *ListIdentityStoresResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListIdentityStoresResponse
		IdentityStores json.RawMessage `json:"identityStores"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ListIdentityStoresResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.IdentityStores
		src := firstPass.IdentityStores
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalListIdentityStoresIdentityStoresPagedResults(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ListIdentityStoresResponse.IdentityStores: %w", err)
			}
		}
	}
	return nil
}

type __premarshalListIdentityStoresResponse struct {
	IdentityStores json.RawMessage `json:"identityStores"`
}

func (v *ListIdentityStoresResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListIdentityStoresResponse) __premarshalJSON() (*__premarshalListIdentityStoresResponse, error) {
	var retval __premarshalListIdentityStoresResponse

	{

		dst := &retval.IdentityStores
		src := v.IdentityStores
		var err error
		*dst, err = __marshalListIdentityStoresIdentityStoresPagedResults(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal ListIdentityStoresResponse.IdentityStores: %w", err)
		}
	}
	return &retval, nil
}

// NotFoundError includes the GraphQL fields of NotFoundError requested by the fragment NotFoundError.
type NotFoundError struct {
	Message string `json:"message"`
}

// GetMessage returns NotFoundError.Message, and is useful for accessing the field via an interface.
func (v *NotFoundError) GetMessage() string { return v.Message }

// PageInfo includes the GraphQL fields of PageInfo requested by the fragment PageInfo.
type PageInfo struct {
	HasNextPage *bool   `json:"hasNextPage"`
	StartCursor *string `json:"startCursor"`
}

// GetHasNextPage returns PageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfo) GetHasNextPage() *bool { return v.HasNextPage }

// GetStartCursor returns PageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *PageInfo) GetStartCursor() *string { return v.StartCursor }

// PermissionDeniedError includes the GraphQL fields of PermissionDeniedError requested by the fragment PermissionDeniedError.
type PermissionDeniedError struct {
	Message string `json:"message"`
}

// GetMessage returns PermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *PermissionDeniedError) GetMessage() string { return v.Message }

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource includes the requested fields of the GraphQL type DataSource.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetTypename() *string {
	return v.Typename
}

// GetId returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Id, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetId() string {
	return v.DataSource.Id
}

// GetName returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Name, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetName() string {
	return v.DataSource.Name
}

// GetType returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Type, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetType() string {
	return v.DataSource.Type
}

// GetDescription returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Description, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetDescription() string {
	return v.DataSource.Description
}

// GetCreatedAt returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetCreatedAt() time.Time {
	return v.DataSource.CreatedAt
}

// GetModifiedAt returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetModifiedAt() time.Time {
	return v.DataSource.ModifiedAt
}

// GetSyncMethod returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource.Parent, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult is implemented by the following types:
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) implementsGraphQLInterfaceRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult() {
}

func __unmarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(b []byte, v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult: "%T"`, v)
	}
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// RemoveIdentityStoreFromDataSourceResponse is returned by RemoveIdentityStoreFromDataSource on success.
type RemoveIdentityStoreFromDataSourceResponse struct {
	RemoveIdentityStoreFromDataSource RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult `json:"-"`
}

// GetRemoveIdentityStoreFromDataSource returns RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource, and is useful for accessing the field via an interface.
func (v *RemoveIdentityStoreFromDataSourceResponse) GetRemoveIdentityStoreFromDataSource() RemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult {
	return v.RemoveIdentityStoreFromDataSource
}

func (v *RemoveIdentityStoreFromDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveIdentityStoreFromDataSourceResponse
		RemoveIdentityStoreFromDataSource json.RawMessage `json:"removeIdentityStoreFromDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveIdentityStoreFromDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveIdentityStoreFromDataSource
		src := firstPass.RemoveIdentityStoreFromDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRemoveIdentityStoreFromDataSourceResponse struct {
	RemoveIdentityStoreFromDataSource json.RawMessage `json:"removeIdentityStoreFromDataSource"`
}

func (v *RemoveIdentityStoreFromDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveIdentityStoreFromDataSourceResponse) __premarshalJSON() (*__premarshalRemoveIdentityStoreFromDataSourceResponse, error) {
	var retval __premarshalRemoveIdentityStoreFromDataSourceResponse

	{

		dst := &retval.RemoveIdentityStoreFromDataSource
		src := v.RemoveIdentityStoreFromDataSource
		var err error
		*dst, err = __marshalRemoveIdentityStoreFromDataSourceRemoveIdentityStoreFromDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RemoveIdentityStoreFromDataSourceResponse.RemoveIdentityStoreFromDataSource: %w", err)
		}
	}
	return &retval, nil
}

type Sort string

const (
	SortAsc  Sort = "asc"
	SortDesc Sort = "desc"
)

// UpdateAccessProviderResponse is returned by UpdateAccessProvider on success.
type UpdateAccessProviderResponse struct {
	UpdateAccessProvider UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult `json:"-"`
}

// GetUpdateAccessProvider returns UpdateAccessProviderResponse.UpdateAccessProvider, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderResponse) GetUpdateAccessProvider() UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult {
	return v.UpdateAccessProvider
}

func (v *UpdateAccessProviderResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderResponse
		UpdateAccessProvider json.RawMessage `json:"updateAccessProvider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateAccessProvider
		src := firstPass.UpdateAccessProvider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateAccessProviderResponse.UpdateAccessProvider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateAccessProviderResponse struct {
	UpdateAccessProvider json.RawMessage `json:"updateAccessProvider"`
}

func (v *UpdateAccessProviderResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderResponse) __premarshalJSON() (*__premarshalUpdateAccessProviderResponse, error) {
	var retval __premarshalUpdateAccessProviderResponse

	{

		dst := &retval.UpdateAccessProvider
		src := v.UpdateAccessProvider
		var err error
		*dst, err = __marshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateAccessProviderResponse.UpdateAccessProvider: %w", err)
		}
	}
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProvider includes the requested fields of the GraphQL type AccessProvider.
type UpdateAccessProviderUpdateAccessProvider struct {
	Typename       *string `json:"__typename"`
	AccessProvider `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProvider.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetTypename() *string { return v.Typename }

// GetId returns UpdateAccessProviderUpdateAccessProvider.Id, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetId() string { return v.AccessProvider.Id }

// GetIsSample returns UpdateAccessProviderUpdateAccessProvider.IsSample, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetIsSample() bool {
	return v.AccessProvider.IsSample
}

// GetCreatedAt returns UpdateAccessProviderUpdateAccessProvider.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetCreatedAt() time.Time {
	return v.AccessProvider.CreatedAt
}

// GetModifiedAt returns UpdateAccessProviderUpdateAccessProvider.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetModifiedAt() time.Time {
	return v.AccessProvider.ModifiedAt
}

// GetName returns UpdateAccessProviderUpdateAccessProvider.Name, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetName() string { return v.AccessProvider.Name }

// GetNamingHint returns UpdateAccessProviderUpdateAccessProvider.NamingHint, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNamingHint() *string {
	return v.AccessProvider.NamingHint
}

// GetState returns UpdateAccessProviderUpdateAccessProvider.State, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetState() models.AccessProviderState {
	return v.AccessProvider.State
}

// GetAction returns UpdateAccessProviderUpdateAccessProvider.Action, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetAction() models.AccessProviderAction {
	return v.AccessProvider.Action
}

// GetType returns UpdateAccessProviderUpdateAccessProvider.Type, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetType() *string { return v.AccessProvider.Type }

// GetDescription returns UpdateAccessProviderUpdateAccessProvider.Description, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetDescription() string {
	return v.AccessProvider.Description
}

// GetPolicyRule returns UpdateAccessProviderUpdateAccessProvider.PolicyRule, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetPolicyRule() *string {
	return v.AccessProvider.PolicyRule
}

// GetOverride returns UpdateAccessProviderUpdateAccessProvider.Override, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetOverride() bool {
	return v.AccessProvider.Override
}

// GetExternal returns UpdateAccessProviderUpdateAccessProvider.External, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetExternal() bool {
	return v.AccessProvider.External
}

// GetNotInternalizable returns UpdateAccessProviderUpdateAccessProvider.NotInternalizable, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNotInternalizable() bool {
	return v.AccessProvider.NotInternalizable
}

// GetWhoLocked returns UpdateAccessProviderUpdateAccessProvider.WhoLocked, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhoLocked() *bool {
	return v.AccessProvider.WhoLocked
}

// GetWhoLockedReason returns UpdateAccessProviderUpdateAccessProvider.WhoLockedReason, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhoLockedReason() *string {
	return v.AccessProvider.WhoLockedReason
}

// GetInheritanceLocked returns UpdateAccessProviderUpdateAccessProvider.InheritanceLocked, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetInheritanceLocked() *bool {
	return v.AccessProvider.InheritanceLocked
}

// GetInheritanceLockedReason returns UpdateAccessProviderUpdateAccessProvider.InheritanceLockedReason, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetInheritanceLockedReason() *string {
	return v.AccessProvider.InheritanceLockedReason
}

// GetWhatLocked returns UpdateAccessProviderUpdateAccessProvider.WhatLocked, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhatLocked() *bool {
	return v.AccessProvider.WhatLocked
}

// GetWhatLockedReason returns UpdateAccessProviderUpdateAccessProvider.WhatLockedReason, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetWhatLockedReason() *string {
	return v.AccessProvider.WhatLockedReason
}

// GetNameLocked returns UpdateAccessProviderUpdateAccessProvider.NameLocked, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNameLocked() *bool {
	return v.AccessProvider.NameLocked
}

// GetNameLockedReason returns UpdateAccessProviderUpdateAccessProvider.NameLockedReason, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetNameLockedReason() *string {
	return v.AccessProvider.NameLockedReason
}

// GetDeleteLocked returns UpdateAccessProviderUpdateAccessProvider.DeleteLocked, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetDeleteLocked() *bool {
	return v.AccessProvider.DeleteLocked
}

// GetDeleteLockedReason returns UpdateAccessProviderUpdateAccessProvider.DeleteLockedReason, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetDeleteLockedReason() *string {
	return v.AccessProvider.DeleteLockedReason
}

// GetComplete returns UpdateAccessProviderUpdateAccessProvider.Complete, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetComplete() *bool {
	return v.AccessProvider.Complete
}

// GetDataSources returns UpdateAccessProviderUpdateAccessProvider.DataSources, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProvider) GetDataSources() []AccessProviderDataSourcesDataSource {
	return v.AccessProvider.DataSources
}

func (v *UpdateAccessProviderUpdateAccessProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccessProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProvider struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	IsSample bool `json:"isSample"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Name string `json:"name"`

	NamingHint *string `json:"namingHint"`

	State models.AccessProviderState `json:"state"`

	Action models.AccessProviderAction `json:"action"`

	Type *string `json:"type"`

	Description string `json:"description"`

	PolicyRule *string `json:"policyRule"`

	Override bool `json:"override"`

	External bool `json:"external"`

	NotInternalizable bool `json:"notInternalizable"`

	WhoLocked *bool `json:"whoLocked"`

	WhoLockedReason *string `json:"whoLockedReason"`

	InheritanceLocked *bool `json:"inheritanceLocked"`

	InheritanceLockedReason *string `json:"inheritanceLockedReason"`

	WhatLocked *bool `json:"whatLocked"`

	WhatLockedReason *string `json:"whatLockedReason"`

	NameLocked *bool `json:"nameLocked"`

	NameLockedReason *string `json:"nameLockedReason"`

	DeleteLocked *bool `json:"deleteLocked"`

	DeleteLockedReason *string `json:"deleteLockedReason"`

	Complete *bool `json:"complete"`

	DataSources []AccessProviderDataSourcesDataSource `json:"dataSources"`
}

func (v *UpdateAccessProviderUpdateAccessProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProvider) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProvider, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProvider

	retval.Typename = v.Typename
	retval.Id = v.AccessProvider.Id
	retval.IsSample = v.AccessProvider.IsSample
	retval.CreatedAt = v.AccessProvider.CreatedAt
	retval.ModifiedAt = v.AccessProvider.ModifiedAt
	retval.Name = v.AccessProvider.Name
	retval.NamingHint = v.AccessProvider.NamingHint
	retval.State = v.AccessProvider.State
	retval.Action = v.AccessProvider.Action
	retval.Type = v.AccessProvider.Type
	retval.Description = v.AccessProvider.Description
	retval.PolicyRule = v.AccessProvider.PolicyRule
	retval.Override = v.AccessProvider.Override
	retval.External = v.AccessProvider.External
	retval.NotInternalizable = v.AccessProvider.NotInternalizable
	retval.WhoLocked = v.AccessProvider.WhoLocked
	retval.WhoLockedReason = v.AccessProvider.WhoLockedReason
	retval.InheritanceLocked = v.AccessProvider.InheritanceLocked
	retval.InheritanceLockedReason = v.AccessProvider.InheritanceLockedReason
	retval.WhatLocked = v.AccessProvider.WhatLocked
	retval.WhatLockedReason = v.AccessProvider.WhatLockedReason
	retval.NameLocked = v.AccessProvider.NameLocked
	retval.NameLockedReason = v.AccessProvider.NameLockedReason
	retval.DeleteLocked = v.AccessProvider.DeleteLocked
	retval.DeleteLockedReason = v.AccessProvider.DeleteLockedReason
	retval.Complete = v.AccessProvider.Complete
	retval.DataSources = v.AccessProvider.DataSources
	return &retval, nil
}

// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests includes the requested fields of the GraphQL type AccessProviderWithOptionalAccessRequests.
type UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests) GetTypename() *string {
	return v.Typename
}

// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult includes the requested fields of the GraphQL interface AccessProviderWithOptionalAccessRequestsResult.
//
// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult is implemented by the following types:
// UpdateAccessProviderUpdateAccessProvider
// UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests
// UpdateAccessProviderUpdateAccessProviderPermissionDeniedError
type UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult interface {
	implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateAccessProviderUpdateAccessProvider) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) implementsGraphQLInterfaceUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult() {
}

func __unmarshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(b []byte, v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AccessProvider":
		*v = new(UpdateAccessProviderUpdateAccessProvider)
		return json.Unmarshal(b, *v)
	case "AccessProviderWithOptionalAccessRequests":
		*v = new(UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateAccessProviderUpdateAccessProviderPermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AccessProviderWithOptionalAccessRequestsResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult(v *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateAccessProviderUpdateAccessProvider:
		typename = "AccessProvider"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProvider
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests:
		typename = "AccessProviderWithOptionalAccessRequests"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequests
		}{typename, v}
		return json.Marshal(result)
	case *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateAccessProviderUpdateAccessProviderAccessProviderWithOptionalAccessRequestsResult: "%T"`, v)
	}
}

// UpdateAccessProviderUpdateAccessProviderPermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateAccessProviderUpdateAccessProviderPermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateAccessProviderUpdateAccessProviderPermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateAccessProviderUpdateAccessProviderPermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateAccessProviderUpdateAccessProviderPermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateAccessProviderUpdateAccessProviderPermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateAccessProviderUpdateAccessProviderPermissionDeniedError) __premarshalJSON() (*__premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError, error) {
	var retval __premarshalUpdateAccessProviderUpdateAccessProviderPermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateDataSourceResponse is returned by UpdateDataSource on success.
type UpdateDataSourceResponse struct {
	UpdateDataSource UpdateDataSourceUpdateDataSourceDataSourceResult `json:"-"`
}

// GetUpdateDataSource returns UpdateDataSourceResponse.UpdateDataSource, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceResponse) GetUpdateDataSource() UpdateDataSourceUpdateDataSourceDataSourceResult {
	return v.UpdateDataSource
}

func (v *UpdateDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceResponse
		UpdateDataSource json.RawMessage `json:"updateDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateDataSource
		src := firstPass.UpdateDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateDataSourceUpdateDataSourceDataSourceResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateDataSourceResponse.UpdateDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateDataSourceResponse struct {
	UpdateDataSource json.RawMessage `json:"updateDataSource"`
}

func (v *UpdateDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceResponse) __premarshalJSON() (*__premarshalUpdateDataSourceResponse, error) {
	var retval __premarshalUpdateDataSourceResponse

	{

		dst := &retval.UpdateDataSource
		src := v.UpdateDataSource
		var err error
		*dst, err = __marshalUpdateDataSourceUpdateDataSourceDataSourceResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateDataSourceResponse.UpdateDataSource: %w", err)
		}
	}
	return &retval, nil
}

// UpdateDataSourceUpdateDataSource includes the requested fields of the GraphQL type DataSource.
type UpdateDataSourceUpdateDataSource struct {
	Typename   *string `json:"__typename"`
	DataSource `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSource.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetTypename() *string { return v.Typename }

// GetId returns UpdateDataSourceUpdateDataSource.Id, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetId() string { return v.DataSource.Id }

// GetName returns UpdateDataSourceUpdateDataSource.Name, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetName() string { return v.DataSource.Name }

// GetType returns UpdateDataSourceUpdateDataSource.Type, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetType() string { return v.DataSource.Type }

// GetDescription returns UpdateDataSourceUpdateDataSource.Description, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetDescription() string { return v.DataSource.Description }

// GetCreatedAt returns UpdateDataSourceUpdateDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetCreatedAt() time.Time { return v.DataSource.CreatedAt }

// GetModifiedAt returns UpdateDataSourceUpdateDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetModifiedAt() time.Time { return v.DataSource.ModifiedAt }

// GetSyncMethod returns UpdateDataSourceUpdateDataSource.SyncMethod, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetSyncMethod() DataSourceSyncMethod {
	return v.DataSource.SyncMethod
}

// GetParent returns UpdateDataSourceUpdateDataSource.Parent, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSource) GetParent() *DataSourceParentDataSource {
	return v.DataSource.Parent
}

func (v *UpdateDataSourceUpdateDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSource struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	SyncMethod DataSourceSyncMethod `json:"syncMethod"`

	Parent *DataSourceParentDataSource `json:"parent"`
}

func (v *UpdateDataSourceUpdateDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSource) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSource, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSource

	retval.Typename = v.Typename
	retval.Id = v.DataSource.Id
	retval.Name = v.DataSource.Name
	retval.Type = v.DataSource.Type
	retval.Description = v.DataSource.Description
	retval.CreatedAt = v.DataSource.CreatedAt
	retval.ModifiedAt = v.DataSource.ModifiedAt
	retval.SyncMethod = v.DataSource.SyncMethod
	retval.Parent = v.DataSource.Parent
	return &retval, nil
}

// UpdateDataSourceUpdateDataSourceDataSourceResult includes the requested fields of the GraphQL interface DataSourceResult.
//
// UpdateDataSourceUpdateDataSourceDataSourceResult is implemented by the following types:
// UpdateDataSourceUpdateDataSource
// UpdateDataSourceUpdateDataSourceNotFoundError
// UpdateDataSourceUpdateDataSourcePermissionDeniedError
type UpdateDataSourceUpdateDataSourceDataSourceResult interface {
	implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateDataSourceUpdateDataSource) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) implementsGraphQLInterfaceUpdateDataSourceUpdateDataSourceDataSourceResult() {
}

func __unmarshalUpdateDataSourceUpdateDataSourceDataSourceResult(b []byte, v *UpdateDataSourceUpdateDataSourceDataSourceResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSource":
		*v = new(UpdateDataSourceUpdateDataSource)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateDataSourceUpdateDataSourceNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateDataSourceUpdateDataSourcePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateDataSourceUpdateDataSourceDataSourceResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateDataSourceUpdateDataSourceDataSourceResult(v *UpdateDataSourceUpdateDataSourceDataSourceResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateDataSourceUpdateDataSource:
		typename = "DataSource"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSource
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateDataSourceUpdateDataSourceNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSourceNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateDataSourceUpdateDataSourcePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateDataSourceUpdateDataSourceDataSourceResult: "%T"`, v)
	}
}

// UpdateDataSourceUpdateDataSourceNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateDataSourceUpdateDataSourceNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSourceNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) GetTypename() *string { return v.Typename }

// GetMessage returns UpdateDataSourceUpdateDataSourceNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourceNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSourceNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSourceNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSourceNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSourceNotFoundError) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSourceNotFoundError, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSourceNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateDataSourceUpdateDataSourcePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateDataSourceUpdateDataSourcePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateDataSourceUpdateDataSourcePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateDataSourceUpdateDataSourcePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateDataSourceUpdateDataSourcePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateDataSourceUpdateDataSourcePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateDataSourceUpdateDataSourcePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError, error) {
	var retval __premarshalUpdateDataSourceUpdateDataSourcePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

// UpdateIdentityStoreResponse is returned by UpdateIdentityStore on success.
type UpdateIdentityStoreResponse struct {
	UpdateIdentityStore UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult `json:"-"`
}

// GetUpdateIdentityStore returns UpdateIdentityStoreResponse.UpdateIdentityStore, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreResponse) GetUpdateIdentityStore() UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult {
	return v.UpdateIdentityStore
}

func (v *UpdateIdentityStoreResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreResponse
		UpdateIdentityStore json.RawMessage `json:"updateIdentityStore"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateIdentityStore
		src := firstPass.UpdateIdentityStore
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UpdateIdentityStoreResponse.UpdateIdentityStore: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateIdentityStoreResponse struct {
	UpdateIdentityStore json.RawMessage `json:"updateIdentityStore"`
}

func (v *UpdateIdentityStoreResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreResponse) __premarshalJSON() (*__premarshalUpdateIdentityStoreResponse, error) {
	var retval __premarshalUpdateIdentityStoreResponse

	{

		dst := &retval.UpdateIdentityStore
		src := v.UpdateIdentityStore
		var err error
		*dst, err = __marshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal UpdateIdentityStoreResponse.UpdateIdentityStore: %w", err)
		}
	}
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStore includes the requested fields of the GraphQL type IdentityStore.
type UpdateIdentityStoreUpdateIdentityStore struct {
	Typename      *string `json:"__typename"`
	IdentityStore `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStore.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetTypename() *string { return v.Typename }

// GetId returns UpdateIdentityStoreUpdateIdentityStore.Id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetId() string { return v.IdentityStore.Id }

// GetName returns UpdateIdentityStoreUpdateIdentityStore.Name, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetName() string { return v.IdentityStore.Name }

// GetType returns UpdateIdentityStoreUpdateIdentityStore.Type, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetType() string { return v.IdentityStore.Type }

// GetDescription returns UpdateIdentityStoreUpdateIdentityStore.Description, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetDescription() string {
	return v.IdentityStore.Description
}

// GetCreatedAt returns UpdateIdentityStoreUpdateIdentityStore.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetCreatedAt() time.Time {
	return v.IdentityStore.CreatedAt
}

// GetModifiedAt returns UpdateIdentityStoreUpdateIdentityStore.ModifiedAt, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetModifiedAt() time.Time {
	return v.IdentityStore.ModifiedAt
}

// GetMaster returns UpdateIdentityStoreUpdateIdentityStore.Master, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetMaster() bool { return v.IdentityStore.Master }

// GetNative returns UpdateIdentityStoreUpdateIdentityStore.Native, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStore) GetNative() bool { return v.IdentityStore.Native }

func (v *UpdateIdentityStoreUpdateIdentityStore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStore
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IdentityStore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStore struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	Type string `json:"type"`

	Description string `json:"description"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	Master bool `json:"master"`

	Native bool `json:"native"`
}

func (v *UpdateIdentityStoreUpdateIdentityStore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStore) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStore, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStore

	retval.Typename = v.Typename
	retval.Id = v.IdentityStore.Id
	retval.Name = v.IdentityStore.Name
	retval.Type = v.IdentityStore.Type
	retval.Description = v.IdentityStore.Description
	retval.CreatedAt = v.IdentityStore.CreatedAt
	retval.ModifiedAt = v.IdentityStore.ModifiedAt
	retval.Master = v.IdentityStore.Master
	retval.Native = v.IdentityStore.Native
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError includes the requested fields of the GraphQL type AlreadyExistsError.
type UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError struct {
	Typename           *string `json:"__typename"`
	AlreadyExistsError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetMessage() string {
	return v.AlreadyExistsError.Message
}

// GetExisting_element_id returns UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError.Existing_element_id, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) GetExisting_element_id() string {
	return v.AlreadyExistsError.Existing_element_id
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AlreadyExistsError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`

	Existing_element_id string `json:"existing_element_id"`
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError

	retval.Typename = v.Typename
	retval.Message = v.AlreadyExistsError.Message
	retval.Existing_element_id = v.AlreadyExistsError.Existing_element_id
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult includes the requested fields of the GraphQL interface IdentityStoreResult.
//
// UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult is implemented by the following types:
// UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
// UpdateIdentityStoreUpdateIdentityStore
// UpdateIdentityStoreUpdateIdentityStoreNotFoundError
// UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
type UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult interface {
	implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStore) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) implementsGraphQLInterfaceUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult() {
}

func __unmarshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(b []byte, v *UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlreadyExistsError":
		*v = new(UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError)
		return json.Unmarshal(b, *v)
	case "IdentityStore":
		*v = new(UpdateIdentityStoreUpdateIdentityStore)
		return json.Unmarshal(b, *v)
	case "NotFoundError":
		*v = new(UpdateIdentityStoreUpdateIdentityStoreNotFoundError)
		return json.Unmarshal(b, *v)
	case "PermissionDeniedError":
		*v = new(UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IdentityStoreResult.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult(v *UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError:
		typename = "AlreadyExistsError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStoreAlreadyExistsError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStore:
		typename = "IdentityStore"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStore
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStoreNotFoundError:
		typename = "NotFoundError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError
		}{typename, premarshaled}
		return json.Marshal(result)
	case *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError:
		typename = "PermissionDeniedError"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateIdentityStoreUpdateIdentityStoreIdentityStoreResult: "%T"`, v)
	}
}

// UpdateIdentityStoreUpdateIdentityStoreNotFoundError includes the requested fields of the GraphQL type NotFoundError.
type UpdateIdentityStoreUpdateIdentityStoreNotFoundError struct {
	Typename      *string `json:"__typename"`
	NotFoundError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStoreNotFoundError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStoreNotFoundError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) GetMessage() string {
	return v.NotFoundError.Message
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStoreNotFoundError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStoreNotFoundError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotFoundError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStoreNotFoundError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStoreNotFoundError

	retval.Typename = v.Typename
	retval.Message = v.NotFoundError.Message
	return &retval, nil
}

// UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError includes the requested fields of the GraphQL type PermissionDeniedError.
type UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError struct {
	Typename              *string `json:"__typename"`
	PermissionDeniedError `json:"-"`
}

// GetTypename returns UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError.Typename, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) GetTypename() *string {
	return v.Typename
}

// GetMessage returns UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError.Message, and is useful for accessing the field via an interface.
func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) GetMessage() string {
	return v.PermissionDeniedError.Message
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PermissionDeniedError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIdentityStoreUpdateIdentityStorePermissionDeniedError) __premarshalJSON() (*__premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError, error) {
	var retval __premarshalUpdateIdentityStoreUpdateIdentityStorePermissionDeniedError

	retval.Typename = v.Typename
	retval.Message = v.PermissionDeniedError.Message
	return &retval, nil
}

type WhatInput struct {
	Permissions       []*string `json:"permissions"`
	GlobalPermissions []*string `json:"globalPermissions"`
	DataObjects       []*string `json:"dataObjects"`
}

// GetPermissions returns WhatInput.Permissions, and is useful for accessing the field via an interface.
func (v *WhatInput) GetPermissions() []*string { return v.Permissions }

// GetGlobalPermissions returns WhatInput.GlobalPermissions, and is useful for accessing the field via an interface.
func (v *WhatInput) GetGlobalPermissions() []*string { return v.GlobalPermissions }

// GetDataObjects returns WhatInput.DataObjects, and is useful for accessing the field via an interface.
func (v *WhatInput) GetDataObjects() []*string { return v.DataObjects }

type WhoInput struct {
	Users           []string `json:"users"`
	Groups          []string `json:"groups"`
	AccessProviders []string `json:"accessProviders"`
}

// GetUsers returns WhoInput.Users, and is useful for accessing the field via an interface.
func (v *WhoInput) GetUsers() []string { return v.Users }

// GetGroups returns WhoInput.Groups, and is useful for accessing the field via an interface.
func (v *WhoInput) GetGroups() []string { return v.Groups }

// GetAccessProviders returns WhoInput.AccessProviders, and is useful for accessing the field via an interface.
func (v *WhoInput) GetAccessProviders() []string { return v.AccessProviders }

type WhoItemInput struct {
	User            *string            `json:"user"`
	Group           *string            `json:"group"`
	AccessProvider  *string            `json:"accessProvider"`
	ExpiresAt       *time.Time         `json:"expiresAt"`
	ExpiresAfter    *time.Duration     `json:"expiresAfter"`
	Type            *AccessWhoItemType `json:"type"`
	PromiseDuration *time.Duration     `json:"promiseDuration"`
}

// GetUser returns WhoItemInput.User, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetUser() *string { return v.User }

// GetGroup returns WhoItemInput.Group, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetGroup() *string { return v.Group }

// GetAccessProvider returns WhoItemInput.AccessProvider, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetAccessProvider() *string { return v.AccessProvider }

// GetExpiresAt returns WhoItemInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetExpiresAfter returns WhoItemInput.ExpiresAfter, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetExpiresAfter() *time.Duration { return v.ExpiresAfter }

// GetType returns WhoItemInput.Type, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetType() *AccessWhoItemType { return v.Type }

// GetPromiseDuration returns WhoItemInput.PromiseDuration, and is useful for accessing the field via an interface.
func (v *WhoItemInput) GetPromiseDuration() *time.Duration { return v.PromiseDuration }

// __AddIdentityStoreToDataSourceInput is used internally by genqlient
type __AddIdentityStoreToDataSourceInput struct {
	DsId string `json:"dsId"`
	IsId string `json:"isId"`
}

// GetDsId returns __AddIdentityStoreToDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__AddIdentityStoreToDataSourceInput) GetDsId() string { return v.DsId }

// GetIsId returns __AddIdentityStoreToDataSourceInput.IsId, and is useful for accessing the field via an interface.
func (v *__AddIdentityStoreToDataSourceInput) GetIsId() string { return v.IsId }

// __CreateAccessProviderInput is used internally by genqlient
type __CreateAccessProviderInput struct {
	Ap AccessProviderInput `json:"ap"`
}

// GetAp returns __CreateAccessProviderInput.Ap, and is useful for accessing the field via an interface.
func (v *__CreateAccessProviderInput) GetAp() AccessProviderInput { return v.Ap }

// __CreateDataSourceInput is used internally by genqlient
type __CreateDataSourceInput struct {
	Input DataSourceInput `json:"input"`
}

// GetInput returns __CreateDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataSourceInput) GetInput() DataSourceInput { return v.Input }

// __CreateIdentityStoreInput is used internally by genqlient
type __CreateIdentityStoreInput struct {
	Input IdentityStoreInput `json:"input"`
}

// GetInput returns __CreateIdentityStoreInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateIdentityStoreInput) GetInput() IdentityStoreInput { return v.Input }

// __DataObjectByExternalIdInput is used internally by genqlient
type __DataObjectByExternalIdInput struct {
	Fullname     string `json:"fullname"`
	DataSourceId string `json:"dataSourceId"`
}

// GetFullname returns __DataObjectByExternalIdInput.Fullname, and is useful for accessing the field via an interface.
func (v *__DataObjectByExternalIdInput) GetFullname() string { return v.Fullname }

// GetDataSourceId returns __DataObjectByExternalIdInput.DataSourceId, and is useful for accessing the field via an interface.
func (v *__DataObjectByExternalIdInput) GetDataSourceId() string { return v.DataSourceId }

// __DataSourceIdentityStoresInput is used internally by genqlient
type __DataSourceIdentityStoresInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceIdentityStoresInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceIdentityStoresInput) GetId() string { return v.Id }

// __DeleteAccessProviderInput is used internally by genqlient
type __DeleteAccessProviderInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteAccessProviderInput) GetId() string { return v.Id }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __DeleteIdentityStoreInput is used internally by genqlient
type __DeleteIdentityStoreInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteIdentityStoreInput) GetId() string { return v.Id }

// __GetAccessProviderInput is used internally by genqlient
type __GetAccessProviderInput struct {
	Id string `json:"id"`
}

// GetId returns __GetAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderInput) GetId() string { return v.Id }

// __GetAccessProviderWhatDataObjectListInput is used internally by genqlient
type __GetAccessProviderWhatDataObjectListInput struct {
	Id     string                   `json:"id"`
	After  *string                  `json:"after"`
	Limit  *int                     `json:"limit"`
	Search *string                  `json:"search"`
	Order  []AccessWhatOrderByInput `json:"order"`
}

// GetId returns __GetAccessProviderWhatDataObjectListInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetId() string { return v.Id }

// GetAfter returns __GetAccessProviderWhatDataObjectListInput.After, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetAfter() *string { return v.After }

// GetLimit returns __GetAccessProviderWhatDataObjectListInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetLimit() *int { return v.Limit }

// GetSearch returns __GetAccessProviderWhatDataObjectListInput.Search, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetSearch() *string { return v.Search }

// GetOrder returns __GetAccessProviderWhatDataObjectListInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhatDataObjectListInput) GetOrder() []AccessWhatOrderByInput {
	return v.Order
}

// __GetAccessProviderWhoListInput is used internally by genqlient
type __GetAccessProviderWhoListInput struct {
	Id     string                          `json:"id"`
	After  *string                         `json:"after"`
	Limit  *int                            `json:"limit"`
	Search *string                         `json:"search"`
	Order  []AccessProviderWhoOrderByInput `json:"order"`
}

// GetId returns __GetAccessProviderWhoListInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetId() string { return v.Id }

// GetAfter returns __GetAccessProviderWhoListInput.After, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetAfter() *string { return v.After }

// GetLimit returns __GetAccessProviderWhoListInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetLimit() *int { return v.Limit }

// GetSearch returns __GetAccessProviderWhoListInput.Search, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetSearch() *string { return v.Search }

// GetOrder returns __GetAccessProviderWhoListInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAccessProviderWhoListInput) GetOrder() []AccessProviderWhoOrderByInput { return v.Order }

// __GetDataSourceInput is used internally by genqlient
type __GetDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __GetDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__GetDataSourceInput) GetId() string { return v.Id }

// __GetIdentityStoreInput is used internally by genqlient
type __GetIdentityStoreInput struct {
	Id string `json:"id"`
}

// GetId returns __GetIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__GetIdentityStoreInput) GetId() string { return v.Id }

// __ListAccessProvidersInput is used internally by genqlient
type __ListAccessProvidersInput struct {
	After  *string                      `json:"after"`
	Limit  *int                         `json:"limit"`
	Filter *AccessProviderFilterInput   `json:"filter"`
	Order  []AccessProviderOrderByInput `json:"order"`
}

// GetAfter returns __ListAccessProvidersInput.After, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetAfter() *string { return v.After }

// GetLimit returns __ListAccessProvidersInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListAccessProvidersInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetFilter() *AccessProviderFilterInput { return v.Filter }

// GetOrder returns __ListAccessProvidersInput.Order, and is useful for accessing the field via an interface.
func (v *__ListAccessProvidersInput) GetOrder() []AccessProviderOrderByInput { return v.Order }

// __ListDataSourcesInput is used internally by genqlient
type __ListDataSourcesInput struct {
	After  *string                  `json:"after"`
	Limit  *int                     `json:"limit"`
	Filter *DataSourceFilterInput   `json:"filter"`
	Search *string                  `json:"search"`
	Order  []DataSourceOrderByInput `json:"order"`
}

// GetAfter returns __ListDataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetAfter() *string { return v.After }

// GetLimit returns __ListDataSourcesInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetLimit() *int { return v.Limit }

// GetFilter returns __ListDataSourcesInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetFilter() *DataSourceFilterInput { return v.Filter }

// GetSearch returns __ListDataSourcesInput.Search, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetSearch() *string { return v.Search }

// GetOrder returns __ListDataSourcesInput.Order, and is useful for accessing the field via an interface.
func (v *__ListDataSourcesInput) GetOrder() []DataSourceOrderByInput { return v.Order }

// __ListIdentityStoresInput is used internally by genqlient
type __ListIdentityStoresInput struct {
	After  *string                     `json:"after"`
	Limit  *int                        `json:"limit"`
	Search *string                     `json:"search"`
	Filter *IdentityStoreFilterInput   `json:"filter"`
	Order  []IdentityStoreOrderByInput `json:"order"`
}

// GetAfter returns __ListIdentityStoresInput.After, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetAfter() *string { return v.After }

// GetLimit returns __ListIdentityStoresInput.Limit, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetLimit() *int { return v.Limit }

// GetSearch returns __ListIdentityStoresInput.Search, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetSearch() *string { return v.Search }

// GetFilter returns __ListIdentityStoresInput.Filter, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetFilter() *IdentityStoreFilterInput { return v.Filter }

// GetOrder returns __ListIdentityStoresInput.Order, and is useful for accessing the field via an interface.
func (v *__ListIdentityStoresInput) GetOrder() []IdentityStoreOrderByInput { return v.Order }

// __RemoveIdentityStoreFromDataSourceInput is used internally by genqlient
type __RemoveIdentityStoreFromDataSourceInput struct {
	DsId string `json:"dsId"`
	IsId string `json:"isId"`
}

// GetDsId returns __RemoveIdentityStoreFromDataSourceInput.DsId, and is useful for accessing the field via an interface.
func (v *__RemoveIdentityStoreFromDataSourceInput) GetDsId() string { return v.DsId }

// GetIsId returns __RemoveIdentityStoreFromDataSourceInput.IsId, and is useful for accessing the field via an interface.
func (v *__RemoveIdentityStoreFromDataSourceInput) GetIsId() string { return v.IsId }

// __UpdateAccessProviderInput is used internally by genqlient
type __UpdateAccessProviderInput struct {
	Id string              `json:"id"`
	Ap AccessProviderInput `json:"ap"`
}

// GetId returns __UpdateAccessProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateAccessProviderInput) GetId() string { return v.Id }

// GetAp returns __UpdateAccessProviderInput.Ap, and is useful for accessing the field via an interface.
func (v *__UpdateAccessProviderInput) GetAp() AccessProviderInput { return v.Ap }

// __UpdateDataSourceInput is used internally by genqlient
type __UpdateDataSourceInput struct {
	Id    string          `json:"id"`
	Input DataSourceInput `json:"input"`
}

// GetId returns __UpdateDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateDataSourceInput) GetId() string { return v.Id }

// GetInput returns __UpdateDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateDataSourceInput) GetInput() DataSourceInput { return v.Input }

// __UpdateIdentityStoreInput is used internally by genqlient
type __UpdateIdentityStoreInput struct {
	Id    string             `json:"id"`
	Input IdentityStoreInput `json:"input"`
}

// GetId returns __UpdateIdentityStoreInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreInput) GetId() string { return v.Id }

// GetInput returns __UpdateIdentityStoreInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateIdentityStoreInput) GetInput() IdentityStoreInput { return v.Input }

// The query or mutation executed by AddIdentityStoreToDataSource.
const AddIdentityStoreToDataSource_Operation = `
mutation AddIdentityStoreToDataSource ($dsId: ID!, $isId: ID!) {
	addIdentityStoreToDataSource(dsId: $dsId, isId: $isId) {
		__typename
		... DataSource
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func AddIdentityStoreToDataSource(
	ctx context.Context,
	client graphql.Client,
	dsId string,
	isId string,
) (*AddIdentityStoreToDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "AddIdentityStoreToDataSource",
		Query:  AddIdentityStoreToDataSource_Operation,
		Variables: &__AddIdentityStoreToDataSourceInput{
			DsId: dsId,
			IsId: isId,
		},
	}
	var err error

	var data AddIdentityStoreToDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateAccessProvider.
const CreateAccessProvider_Operation = `
mutation CreateAccessProvider ($ap: AccessProviderInput!) {
	createAccessProvider(input: $ap, enableAdditionalAccessRequests: false) {
		__typename
		... AccessProvider
		... on AccessProviderWithOptionalAccessRequests {
			accessProvider {
				id
				name
				state
				action
			}
			accessRequests {
				id
				name
			}
		}
		... PermissionDeniedError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	type
	description
	policyRule
	override
	external
	notInternalizable
	whoLocked
	whoLockedReason
	inheritanceLocked
	inheritanceLockedReason
	whatLocked
	whatLockedReason
	nameLocked
	nameLockedReason
	deleteLocked
	deleteLockedReason
	complete
	dataSources {
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func CreateAccessProvider(
	ctx context.Context,
	client graphql.Client,
	ap AccessProviderInput,
) (*CreateAccessProviderResponse, error) {
	req := &graphql.Request{
		OpName: "CreateAccessProvider",
		Query:  CreateAccessProvider_Operation,
		Variables: &__CreateAccessProviderInput{
			Ap: ap,
		},
	}
	var err error

	var data CreateAccessProviderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateDataSource.
const CreateDataSource_Operation = `
mutation CreateDataSource ($input: DataSourceInput!) {
	createDataSource(input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func CreateDataSource(
	ctx context.Context,
	client graphql.Client,
	input DataSourceInput,
) (*CreateDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateDataSource",
		Query:  CreateDataSource_Operation,
		Variables: &__CreateDataSourceInput{
			Input: input,
		},
	}
	var err error

	var data CreateDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateIdentityStore.
const CreateIdentityStore_Operation = `
mutation CreateIdentityStore ($input: IdentityStoreInput!) {
	createIdentityStore(input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... AlreadyExistsError
		... IdentityStore
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func CreateIdentityStore(
	ctx context.Context,
	client graphql.Client,
	input IdentityStoreInput,
) (*CreateIdentityStoreResponse, error) {
	req := &graphql.Request{
		OpName: "CreateIdentityStore",
		Query:  CreateIdentityStore_Operation,
		Variables: &__CreateIdentityStoreInput{
			Input: input,
		},
	}
	var err error

	var data CreateIdentityStoreResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataObjectByExternalId.
const DataObjectByExternalId_Operation = `
query DataObjectByExternalId ($fullname: String!, $dataSourceId: ID!) {
	dataObjects(filter: {fullNames:[$fullname],dataSources:[$dataSourceId]}) {
		edges {
			node {
				__typename
				... DataObject
			}
		}
	}
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
}
`

func DataObjectByExternalId(
	ctx context.Context,
	client graphql.Client,
	fullname string,
	dataSourceId string,
) (*DataObjectByExternalIdResponse, error) {
	req := &graphql.Request{
		OpName: "DataObjectByExternalId",
		Query:  DataObjectByExternalId_Operation,
		Variables: &__DataObjectByExternalIdInput{
			Fullname:     fullname,
			DataSourceId: dataSourceId,
		},
	}
	var err error

	var data DataObjectByExternalIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DataSourceIdentityStores.
const DataSourceIdentityStores_Operation = `
query DataSourceIdentityStores ($id: ID!) {
	dataSource(id: $id) {
		__typename
		... on DataSource {
			identityStores {
				... IdentityStore
			}
		}
		... PermissionDeniedError
	}
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DataSourceIdentityStores(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataSourceIdentityStoresResponse, error) {
	req := &graphql.Request{
		OpName: "DataSourceIdentityStores",
		Query:  DataSourceIdentityStores_Operation,
		Variables: &__DataSourceIdentityStoresInput{
			Id: id,
		},
	}
	var err error

	var data DataSourceIdentityStoresResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteAccessProvider.
const DeleteAccessProvider_Operation = `
mutation DeleteAccessProvider ($id: ID!) {
	deleteAccessProvider(id: $id) {
		__typename
		... AccessProvider
		... NotFoundError
		... PermissionDeniedError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	type
	description
	policyRule
	override
	external
	notInternalizable
	whoLocked
	whoLockedReason
	inheritanceLocked
	inheritanceLockedReason
	whatLocked
	whatLockedReason
	nameLocked
	nameLockedReason
	deleteLocked
	deleteLockedReason
	complete
	dataSources {
		... DataSource
	}
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func DeleteAccessProvider(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteAccessProviderResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteAccessProvider",
		Query:  DeleteAccessProvider_Operation,
		Variables: &__DeleteAccessProviderInput{
			Id: id,
		},
	}
	var err error

	var data DeleteAccessProviderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteDataSource.
const DeleteDataSource_Operation = `
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id) {
		__typename
		... PermissionDeniedError
		... on DeleteDataSource {
			success
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DeleteDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteDataSource",
		Query:  DeleteDataSource_Operation,
		Variables: &__DeleteDataSourceInput{
			Id: id,
		},
	}
	var err error

	var data DeleteDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by DeleteIdentityStore.
const DeleteIdentityStore_Operation = `
mutation DeleteIdentityStore ($id: ID!) {
	deleteIdentityStore(id: $id) {
		__typename
		... PermissionDeniedError
		... on DeleteIdentityStore {
			success
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func DeleteIdentityStore(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteIdentityStoreResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteIdentityStore",
		Query:  DeleteIdentityStore_Operation,
		Variables: &__DeleteIdentityStoreInput{
			Id: id,
		},
	}
	var err error

	var data DeleteIdentityStoreResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetAccessProvider.
const GetAccessProvider_Operation = `
query GetAccessProvider ($id: ID!) {
	accessProvider(id: $id) {
		__typename
		... AccessProvider
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	type
	description
	policyRule
	override
	external
	notInternalizable
	whoLocked
	whoLockedReason
	inheritanceLocked
	inheritanceLockedReason
	whatLocked
	whatLockedReason
	nameLocked
	nameLockedReason
	deleteLocked
	deleteLockedReason
	complete
	dataSources {
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func GetAccessProvider(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetAccessProviderResponse, error) {
	req := &graphql.Request{
		OpName: "GetAccessProvider",
		Query:  GetAccessProvider_Operation,
		Variables: &__GetAccessProviderInput{
			Id: id,
		},
	}
	var err error

	var data GetAccessProviderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetAccessProviderWhatDataObjectList.
const GetAccessProviderWhatDataObjectList_Operation = `
query GetAccessProviderWhatDataObjectList ($id: ID!, $after: String, $limit: Int, $search: String, $order: [AccessWhatOrderByInput!]) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whatDataObjects(after: $after, limit: $limit, search: $search, order: $order) {
				__typename
				... AccessProviderWhatList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhatList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProviderWhatListItem
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProviderWhatListItem on AccessWhatItem {
	dataObject {
		... DataObject
	}
	globalPermissions
	permissions
}
fragment DataObject on DataObject {
	id
	name
	fullName
	type
	dataType
	deleted
}
`

func GetAccessProviderWhatDataObjectList(
	ctx context.Context,
	client graphql.Client,
	id string,
	after *string,
	limit *int,
	search *string,
	order []AccessWhatOrderByInput,
) (*GetAccessProviderWhatDataObjectListResponse, error) {
	req := &graphql.Request{
		OpName: "GetAccessProviderWhatDataObjectList",
		Query:  GetAccessProviderWhatDataObjectList_Operation,
		Variables: &__GetAccessProviderWhatDataObjectListInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Search: search,
			Order:  order,
		},
	}
	var err error

	var data GetAccessProviderWhatDataObjectListResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetAccessProviderWhoList.
const GetAccessProviderWhoList_Operation = `
query GetAccessProviderWhoList ($id: ID!, $after: String, $limit: Int, $search: String, $order: [AccessProviderWhoOrderByInput!]) {
	accessProvider(id: $id) {
		__typename
		... on AccessProvider {
			whoList(after: $after, limit: $limit, search: $search, order: $order) {
				__typename
				... AccessProviderWhoList
				... PermissionDeniedError
			}
		}
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment AccessProviderWhoList on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProviderWhoListItem
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProviderWhoListItem on AccessWhoItem {
	expiresAfter
	expiresAt
	promiseDuration
	type
	item {
		__typename
		... on AccessProvider {
			id
			name
		}
		... on Group {
			name
			id
			identityStore {
				id
				name
			}
		}
		... on User {
			name
			id
		}
	}
}
`

func GetAccessProviderWhoList(
	ctx context.Context,
	client graphql.Client,
	id string,
	after *string,
	limit *int,
	search *string,
	order []AccessProviderWhoOrderByInput,
) (*GetAccessProviderWhoListResponse, error) {
	req := &graphql.Request{
		OpName: "GetAccessProviderWhoList",
		Query:  GetAccessProviderWhoList_Operation,
		Variables: &__GetAccessProviderWhoListInput{
			Id:     id,
			After:  after,
			Limit:  limit,
			Search: search,
			Order:  order,
		},
	}
	var err error

	var data GetAccessProviderWhoListResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetDataSource.
const GetDataSource_Operation = `
query GetDataSource ($id: ID!) {
	dataSource(id: $id) {
		__typename
		... DataSource
		... PermissionDeniedError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
`

func GetDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "GetDataSource",
		Query:  GetDataSource_Operation,
		Variables: &__GetDataSourceInput{
			Id: id,
		},
	}
	var err error

	var data GetDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetIdentityStore.
const GetIdentityStore_Operation = `
query GetIdentityStore ($id: ID!) {
	identityStore(id: $id) {
		__typename
		... IdentityStore
		... NotFoundError
		... PermissionDeniedError
		... AlreadyExistsError
	}
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
fragment NotFoundError on NotFoundError {
	message
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
`

func GetIdentityStore(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetIdentityStoreResponse, error) {
	req := &graphql.Request{
		OpName: "GetIdentityStore",
		Query:  GetIdentityStore_Operation,
		Variables: &__GetIdentityStoreInput{
			Id: id,
		},
	}
	var err error

	var data GetIdentityStoreResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ListAccessProviders.
const ListAccessProviders_Operation = `
query ListAccessProviders ($after: String, $limit: Int, $filter: AccessProviderFilterInput, $order: [AccessProviderOrderByInput!]) {
	accessProviders(after: $after, limit: $limit, filter: $filter, order: $order) {
		__typename
		... AccessProviderPage
		... PermissionDeniedError
	}
}
fragment AccessProviderPage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... AccessProvider
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	type
	description
	policyRule
	override
	external
	notInternalizable
	whoLocked
	whoLockedReason
	inheritanceLocked
	inheritanceLockedReason
	whatLocked
	whatLockedReason
	nameLocked
	nameLockedReason
	deleteLocked
	deleteLockedReason
	complete
	dataSources {
		... DataSource
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func ListAccessProviders(
	ctx context.Context,
	client graphql.Client,
	after *string,
	limit *int,
	filter *AccessProviderFilterInput,
	order []AccessProviderOrderByInput,
) (*ListAccessProvidersResponse, error) {
	req := &graphql.Request{
		OpName: "ListAccessProviders",
		Query:  ListAccessProviders_Operation,
		Variables: &__ListAccessProvidersInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Order:  order,
		},
	}
	var err error

	var data ListAccessProvidersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ListDataSources.
const ListDataSources_Operation = `
query ListDataSources ($after: String, $limit: Int, $filter: DataSourceFilterInput, $search: String, $order: [DataSourceOrderByInput!]) {
	dataSources(after: $after, limit: $limit, filter: $filter, order: $order, search: $search) {
		__typename
		... DataSourcePage
		... PermissionDeniedError
	}
}
fragment DataSourcePage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... DataSource
		}
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func ListDataSources(
	ctx context.Context,
	client graphql.Client,
	after *string,
	limit *int,
	filter *DataSourceFilterInput,
	search *string,
	order []DataSourceOrderByInput,
) (*ListDataSourcesResponse, error) {
	req := &graphql.Request{
		OpName: "ListDataSources",
		Query:  ListDataSources_Operation,
		Variables: &__ListDataSourcesInput{
			After:  after,
			Limit:  limit,
			Filter: filter,
			Search: search,
			Order:  order,
		},
	}
	var err error

	var data ListDataSourcesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ListIdentityStores.
const ListIdentityStores_Operation = `
query ListIdentityStores ($after: String, $limit: Int, $search: String, $filter: IdentityStoreFilterInput, $order: [IdentityStoreOrderByInput!]) {
	identityStores(after: $after, limit: $limit, search: $search, filter: $filter, order: $order) {
		__typename
		... PermissionDeniedError
		... IdentityStorePage
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment IdentityStorePage on PagedResult {
	pageInfo {
		... PageInfo
	}
	edges {
		cursor
		node {
			__typename
			... IdentityStore
		}
	}
}
fragment PageInfo on PageInfo {
	hasNextPage
	startCursor
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func ListIdentityStores(
	ctx context.Context,
	client graphql.Client,
	after *string,
	limit *int,
	search *string,
	filter *IdentityStoreFilterInput,
	order []IdentityStoreOrderByInput,
) (*ListIdentityStoresResponse, error) {
	req := &graphql.Request{
		OpName: "ListIdentityStores",
		Query:  ListIdentityStores_Operation,
		Variables: &__ListIdentityStoresInput{
			After:  after,
			Limit:  limit,
			Search: search,
			Filter: filter,
			Order:  order,
		},
	}
	var err error

	var data ListIdentityStoresResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by RemoveIdentityStoreFromDataSource.
const RemoveIdentityStoreFromDataSource_Operation = `
mutation RemoveIdentityStoreFromDataSource ($dsId: ID!, $isId: ID!) {
	removeIdentityStoreFromDataSource(dsId: $dsId, isId: $isId) {
		__typename
		... DataSource
		... PermissionDeniedError
		... NotFoundError
	}
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
`

func RemoveIdentityStoreFromDataSource(
	ctx context.Context,
	client graphql.Client,
	dsId string,
	isId string,
) (*RemoveIdentityStoreFromDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveIdentityStoreFromDataSource",
		Query:  RemoveIdentityStoreFromDataSource_Operation,
		Variables: &__RemoveIdentityStoreFromDataSourceInput{
			DsId: dsId,
			IsId: isId,
		},
	}
	var err error

	var data RemoveIdentityStoreFromDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UpdateAccessProvider.
const UpdateAccessProvider_Operation = `
mutation UpdateAccessProvider ($id: ID!, $ap: AccessProviderInput!) {
	updateAccessProvider(id: $id, input: $ap, enableAdditionalAccessRequests: false) {
		__typename
		... AccessProvider
		... PermissionDeniedError
	}
}
fragment AccessProvider on AccessProvider {
	id
	isSample
	createdAt
	modifiedAt
	name
	namingHint
	state
	action
	type
	description
	policyRule
	override
	external
	notInternalizable
	whoLocked
	whoLockedReason
	inheritanceLocked
	inheritanceLockedReason
	whatLocked
	whatLockedReason
	nameLocked
	nameLockedReason
	deleteLocked
	deleteLockedReason
	complete
	dataSources {
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func UpdateAccessProvider(
	ctx context.Context,
	client graphql.Client,
	id string,
	ap AccessProviderInput,
) (*UpdateAccessProviderResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateAccessProvider",
		Query:  UpdateAccessProvider_Operation,
		Variables: &__UpdateAccessProviderInput{
			Id: id,
			Ap: ap,
		},
	}
	var err error

	var data UpdateAccessProviderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UpdateDataSource.
const UpdateDataSource_Operation = `
mutation UpdateDataSource ($id: ID!, $input: DataSourceInput!) {
	updateDataSource(id: $id, input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... DataSource
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment DataSource on DataSource {
	id
	name
	type
	description
	createdAt
	modifiedAt
	description
	syncMethod
	parent {
		id
	}
}
`

func UpdateDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
	input DataSourceInput,
) (*UpdateDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateDataSource",
		Query:  UpdateDataSource_Operation,
		Variables: &__UpdateDataSourceInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data UpdateDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UpdateIdentityStore.
const UpdateIdentityStore_Operation = `
mutation UpdateIdentityStore ($id: ID!, $input: IdentityStoreInput!) {
	updateIdentityStore(id: $id, input: $input) {
		__typename
		... PermissionDeniedError
		... NotFoundError
		... AlreadyExistsError
		... IdentityStore
	}
}
fragment PermissionDeniedError on PermissionDeniedError {
	message
}
fragment NotFoundError on NotFoundError {
	message
}
fragment AlreadyExistsError on AlreadyExistsError {
	message
	existing_element_id: id
}
fragment IdentityStore on IdentityStore {
	id
	name
	type
	description
	createdAt
	modifiedAt
	master
	native
}
`

func UpdateIdentityStore(
	ctx context.Context,
	client graphql.Client,
	id string,
	input IdentityStoreInput,
) (*UpdateIdentityStoreResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateIdentityStore",
		Query:  UpdateIdentityStore_Operation,
		Variables: &__UpdateIdentityStoreInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data UpdateIdentityStoreResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
