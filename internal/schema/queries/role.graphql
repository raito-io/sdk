fragment Role on Role {
    id
    description
    name
}

fragment RoleAssignment on RoleAssignment {
    id
    role {
        ...Role
    }
    on {
        ... on AccessProvider {
            id
        }
        ... on DataSource {
            id
        }
        ... on DataObject {
            id
        }
        ... NotFoundError
    }
    to {
        ... on User {
            id
        }
        ... on Group {
            id
        }
    }
}

fragment RoleAssignmentPage on PagedResult {
    pageInfo {
        ... PageInfo
    }
    edges {
        cursor
        node {
            ... RoleAssignment
        }
    }
}

fragment RolePage on PagedResult {
    pageInfo {
        ...PageInfo
    }
    edges {
        cursor
        node {
            ... Role
        }
    }
}

query GetRole($id: ID!) {
    role(id: $id) {
      ...Role
    }
}

query ListRoles($after: String, $limit: Int, $filter: RoleFilterInput, $order: [RoleOrderByInput!]) {
    roles(after: $after, limit: $limit, filter: $filter, order: $order) {
        ...RolePage
    }
}

query ListRoleAssignments($after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
        ... RoleAssignmentPage
    }
}

query ListRoleAssignmentsOnIdentityStore($isId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    identityStore(id: $isId) {
        ... on IdentityStore {
            roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
                ... RoleAssignmentPage
            }
        }
        ... PermissionDeniedError
        ... AlreadyExistsError
        ... NotFoundError
    }
}

query ListRoleAssignmentsOnDataObject($doId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    dataObject(id: $doId) {
        roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
           ... RoleAssignmentPage
        }
    }
}

query ListRoleAssignmentsOnDataSource($dsId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    dataSource(id: $dsId) {
        ... on DataSource {
            roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
                ... RoleAssignmentPage
            }
        }
        ... PermissionDeniedError
        ... NotFoundError
    }
}

query ListRoleAssignmentsOnAccessProvider($apId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    accessProvider(id: $apId) {
        ... on AccessProvider {
            roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
                ... RoleAssignmentPage
            }
        }
        ... PermissionDeniedError
        ... NotFoundError
    }
}

query ListRoleAssignmentsOnUser($userId: ID!, $after: String, $limit: Int, $filter: RoleAssignmentFilterInput, $order: [RoleAssignmentOrderInput!]) {
    user(id: $userId) {
        ... on User {
            roleAssignments(after: $after, limit: $limit, filter: $filter, order: $order) {
                ... RoleAssignmentPage
            }
        }
        ...InvalidInputError
        ...InvalidEmailError
        ...PermissionDeniedError
        ...NotFoundError
    }
}

mutation AssignRoleOnIdentityStore($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    assignRoleOnIdentityStore(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation AssignRoleOnDataObject($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    assignRoleOnDataObject(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation AssignRoleOnDataSource($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    assignRoleOnDataSource(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation AssignRoleOnAccessProvider($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    assignRoleOnAccessProvider(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation AssignGlobalRole($role: ID!, $to: [ID!]!) {
    assignGlobalRole(role: $role, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UnassignRoleFromIdentityStore($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    unassignRoleFromIdentityStore(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UnassignRoleFromDataObject($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    unassignRoleFromDataObject(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UnassignRoleFromDataSource($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    unassignRoleFromDataSource(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UnassignRoleFromAccessProvider($role: ID!, $resourceId: ID!, $to: [ID!]!) {
    unassignRoleFromAccessProvider(role: $role, resourceId: $resourceId, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UnassignGlobalRole($role: ID!, $to: [ID!]!) {
    unassignGlobalRole(role: $role, to: $to) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UpdateRoleAssigneesOnIdentityStore($isId: ID!, $roleID: ID!, $assignees: [ID!]!) {
    updateRoleAssigneesOnIdentityStore(identityStore: $isId, roleInput: {roleID: $roleID, assignees: $assignees}) {
        ... Role
        ... PermissionDeniedError
        ... NotFoundError
    }
}

mutation UpdateRoleAssigneesOnDataObject($doId: ID!, $roleID: ID!, $assignees: [ID!]!) {
    updateRoleAssigneesOnDataObject(dataObject: $doId, roleInput: {roleID: $roleID, assignees: $assignees}) {
       ... Role
       ... PermissionDeniedError
       ... NotFoundError
    }
}

mutation UpdateRoleAssigneesOnDataSource($dsId: ID!, $roleID: ID!, $assignees: [ID!]!) {
    updateRoleAssigneesOnDataSource(dataSource: $dsId, roleInput: {roleID: $roleID, assignees: $assignees}) {
      ... Role
      ... PermissionDeniedError
      ... NotFoundError
    }
}

mutation UpdateRoleAssigneesOnAccessProvider($apId: ID!, $roleID: ID!, $assignees: [ID!]!) {
    updateRoleAssigneesOnAccessProvider(accessProvider: $apId, roleInput: {roleID: $roleID, assignees: $assignees}) {
       ... Role
       ... PermissionDeniedError
       ... NotFoundError
    }
}

mutation SetGlobalRolesForUser($user: ID!, $roles: [ID!]!) {
    setGlobalRolesForUser(user: $user, roles: $roles) {
        ... on SetGlobalRolesForUser{
            success
        }
        ... PermissionDeniedError
    }
}