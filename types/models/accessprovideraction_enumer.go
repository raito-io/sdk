// Code generated by "enumer -type=AccessProviderAction -json -trimprefix=AccessProviderAction"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AccessProviderActionName = "PromiseGrantDenyMaskFilteredPurpose"

var _AccessProviderActionIndex = [...]uint8{0, 7, 12, 16, 20, 28, 35}

const _AccessProviderActionLowerName = "promisegrantdenymaskfilteredpurpose"

func (i AccessProviderAction) String() string {
	if i < 0 || i >= AccessProviderAction(len(_AccessProviderActionIndex)-1) {
		return fmt.Sprintf("AccessProviderAction(%d)", i)
	}
	return _AccessProviderActionName[_AccessProviderActionIndex[i]:_AccessProviderActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccessProviderActionNoOp() {
	var x [1]struct{}
	_ = x[AccessProviderActionPromise-(0)]
	_ = x[AccessProviderActionGrant-(1)]
	_ = x[AccessProviderActionDeny-(2)]
	_ = x[AccessProviderActionMask-(3)]
	_ = x[AccessProviderActionFiltered-(4)]
	_ = x[AccessProviderActionPurpose-(5)]
}

var _AccessProviderActionValues = []AccessProviderAction{AccessProviderActionPromise, AccessProviderActionGrant, AccessProviderActionDeny, AccessProviderActionMask, AccessProviderActionFiltered, AccessProviderActionPurpose}

var _AccessProviderActionNameToValueMap = map[string]AccessProviderAction{
	_AccessProviderActionName[0:7]:        AccessProviderActionPromise,
	_AccessProviderActionLowerName[0:7]:   AccessProviderActionPromise,
	_AccessProviderActionName[7:12]:       AccessProviderActionGrant,
	_AccessProviderActionLowerName[7:12]:  AccessProviderActionGrant,
	_AccessProviderActionName[12:16]:      AccessProviderActionDeny,
	_AccessProviderActionLowerName[12:16]: AccessProviderActionDeny,
	_AccessProviderActionName[16:20]:      AccessProviderActionMask,
	_AccessProviderActionLowerName[16:20]: AccessProviderActionMask,
	_AccessProviderActionName[20:28]:      AccessProviderActionFiltered,
	_AccessProviderActionLowerName[20:28]: AccessProviderActionFiltered,
	_AccessProviderActionName[28:35]:      AccessProviderActionPurpose,
	_AccessProviderActionLowerName[28:35]: AccessProviderActionPurpose,
}

var _AccessProviderActionNames = []string{
	_AccessProviderActionName[0:7],
	_AccessProviderActionName[7:12],
	_AccessProviderActionName[12:16],
	_AccessProviderActionName[16:20],
	_AccessProviderActionName[20:28],
	_AccessProviderActionName[28:35],
}

// AccessProviderActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccessProviderActionString(s string) (AccessProviderAction, error) {
	if val, ok := _AccessProviderActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccessProviderActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccessProviderAction values", s)
}

// AccessProviderActionValues returns all values of the enum
func AccessProviderActionValues() []AccessProviderAction {
	return _AccessProviderActionValues
}

// AccessProviderActionStrings returns a slice of all String values of the enum
func AccessProviderActionStrings() []string {
	strs := make([]string, len(_AccessProviderActionNames))
	copy(strs, _AccessProviderActionNames)
	return strs
}

// IsAAccessProviderAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccessProviderAction) IsAAccessProviderAction() bool {
	for _, v := range _AccessProviderActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccessProviderAction
func (i AccessProviderAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccessProviderAction
func (i *AccessProviderAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccessProviderAction should be a string, got %s", data)
	}

	var err error
	*i, err = AccessProviderActionString(s)
	return err
}
