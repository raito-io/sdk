// Code generated by "enumer -type=AccessProviderState -json -trimprefix=AccessProviderState"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AccessProviderStateName = "ActiveInactiveDeleted"

var _AccessProviderStateIndex = [...]uint8{0, 6, 14, 21}

const _AccessProviderStateLowerName = "activeinactivedeleted"

func (i AccessProviderState) String() string {
	if i < 0 || i >= AccessProviderState(len(_AccessProviderStateIndex)-1) {
		return fmt.Sprintf("AccessProviderState(%d)", i)
	}
	return _AccessProviderStateName[_AccessProviderStateIndex[i]:_AccessProviderStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccessProviderStateNoOp() {
	var x [1]struct{}
	_ = x[AccessProviderStateActive-(0)]
	_ = x[AccessProviderStateInactive-(1)]
	_ = x[AccessProviderStateDeleted-(2)]
}

var _AccessProviderStateValues = []AccessProviderState{AccessProviderStateActive, AccessProviderStateInactive, AccessProviderStateDeleted}

var _AccessProviderStateNameToValueMap = map[string]AccessProviderState{
	_AccessProviderStateName[0:6]:        AccessProviderStateActive,
	_AccessProviderStateLowerName[0:6]:   AccessProviderStateActive,
	_AccessProviderStateName[6:14]:       AccessProviderStateInactive,
	_AccessProviderStateLowerName[6:14]:  AccessProviderStateInactive,
	_AccessProviderStateName[14:21]:      AccessProviderStateDeleted,
	_AccessProviderStateLowerName[14:21]: AccessProviderStateDeleted,
}

var _AccessProviderStateNames = []string{
	_AccessProviderStateName[0:6],
	_AccessProviderStateName[6:14],
	_AccessProviderStateName[14:21],
}

// AccessProviderStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccessProviderStateString(s string) (AccessProviderState, error) {
	if val, ok := _AccessProviderStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccessProviderStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccessProviderState values", s)
}

// AccessProviderStateValues returns all values of the enum
func AccessProviderStateValues() []AccessProviderState {
	return _AccessProviderStateValues
}

// AccessProviderStateStrings returns a slice of all String values of the enum
func AccessProviderStateStrings() []string {
	strs := make([]string, len(_AccessProviderStateNames))
	copy(strs, _AccessProviderStateNames)
	return strs
}

// IsAAccessProviderState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccessProviderState) IsAAccessProviderState() bool {
	for _, v := range _AccessProviderStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccessProviderState
func (i AccessProviderState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccessProviderState
func (i *AccessProviderState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccessProviderState should be a string, got %s", data)
	}

	var err error
	*i, err = AccessProviderStateString(s)
	return err
}
